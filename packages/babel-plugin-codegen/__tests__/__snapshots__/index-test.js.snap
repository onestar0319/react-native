// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Babel plugin inline view configs can inline config for FullNativeComponent.js 1`] = `
"// @flow
const codegenNativeCommands = require('codegenNativeCommands');

const codegenNativeComponent = require('codegenNativeComponent');

import type { Int32, BubblingEventHandler, DirectEventHandler, WithDefault } from 'CodegenFlowtypes';
import type { NativeComponentType } from 'codegenNativeComponent';
import type { ViewProps } from 'ViewPropTypes';
type ModuleProps = $ReadOnly<{| ...ViewProps,
  // Props
  boolean_default_true_optional_both?: WithDefault<boolean, true>,
  // Events
  onDirectEventDefinedInlineNull: DirectEventHandler<null>,
  onBubblingEventDefinedInlineNull: BubblingEventHandler<null>,
|}>;
type NativeType = NativeComponentType<ModuleProps>;
interface NativeCommands {
  +hotspotUpdate: (viewRef: React.ElementRef<NativeType>, x: Int32, y: Int32) => void,
  +scrollTo: (viewRef: React.ElementRef<NativeType>, y: Int32, animated: boolean) => void,
}

const NativeComponentRegistry = require('NativeComponentRegistry');

const {
  dispatchCommand
} = require(\\"react-native/Libraries/Renderer/shims/ReactNative\\");

let nativeComponentName = 'RCTModule';
export default NativeComponentRegistry.get(nativeComponentName, () => ({
  uiViewClassName: 'RCTModule',
  bubblingEventTypes: {
    topBubblingEventDefinedInlineNull: {
      phasedRegistrationNames: {
        captured: 'onBubblingEventDefinedInlineNullCapture',
        bubbled: 'onBubblingEventDefinedInlineNull'
      }
    }
  },
  directEventTypes: {
    topDirectEventDefinedInlineNull: {
      registrationName: 'onDirectEventDefinedInlineNull'
    }
  },
  validAttributes: {
    boolean_default_true_optional_both: true,
    onDirectEventDefinedInlineNull: true,
    onBubblingEventDefinedInlineNull: true
  }
}));
export const Commands = {
  hotspotUpdate(ref, x, y) {
    dispatchCommand(ref, \\"hotspotUpdate\\", [x, y]);
  },

  scrollTo(ref, y, animated) {
    dispatchCommand(ref, \\"scrollTo\\", [y, animated]);
  }

};"
`;

exports[`Babel plugin inline view configs can inline config for FullTypedNativeComponent.js 1`] = `
"// @flow
const codegenNativeCommands = require('codegenNativeCommands');

const codegenNativeComponent = require('codegenNativeComponent');

import type { NativeComponentType } from 'codegenNativeComponent';
import type { Int32, BubblingEventHandler, DirectEventHandler, WithDefault } from 'CodegenFlowtypes';
import type { ViewProps } from 'ViewPropTypes';
type ModuleProps = $ReadOnly<{| ...ViewProps,
  // Props
  boolean_default_true_optional_both?: WithDefault<boolean, true>,
  // Events
  onDirectEventDefinedInlineNull: DirectEventHandler<null>,
  onBubblingEventDefinedInlineNull: BubblingEventHandler<null>,
|}>;
type NativeType = NativeComponentType<ModuleProps>;
interface NativeCommands {
  +hotspotUpdate: (viewRef: React.ElementRef<NativeType>, x: Int32, y: Int32) => void,
  +scrollTo: (viewRef: React.ElementRef<NativeType>, y: Int32, animated: boolean) => void,
}

const NativeComponentRegistry = require('NativeComponentRegistry');

const {
  dispatchCommand
} = require(\\"react-native/Libraries/Renderer/shims/ReactNative\\");

let nativeComponentName = 'RCTModule';
export default NativeComponentRegistry.get(nativeComponentName, () => ({
  uiViewClassName: 'RCTModule',
  bubblingEventTypes: {
    topBubblingEventDefinedInlineNull: {
      phasedRegistrationNames: {
        captured: 'onBubblingEventDefinedInlineNullCapture',
        bubbled: 'onBubblingEventDefinedInlineNull'
      }
    }
  },
  directEventTypes: {
    topDirectEventDefinedInlineNull: {
      registrationName: 'onDirectEventDefinedInlineNull'
    }
  },
  validAttributes: {
    boolean_default_true_optional_both: true,
    onDirectEventDefinedInlineNull: true,
    onBubblingEventDefinedInlineNull: true
  }
}));
export const Commands = {
  hotspotUpdate(ref, x, y) {
    dispatchCommand(ref, \\"hotspotUpdate\\", [x, y]);
  },

  scrollTo(ref, y, animated) {
    dispatchCommand(ref, \\"scrollTo\\", [y, animated]);
  }

};"
`;

exports[`Babel plugin inline view configs can inline config for NativeSampleTurboModule0.js 1`] = `
"// @flow
import type { RootTag, TurboModule } from '../RCTExport';
import * as TurboModuleRegistry from '../TurboModuleRegistry';
export interface Spec extends TurboModule {
  // Exported methods.
  +getConstants: () => {|
    const1: boolean,
    const2: number,
    const3: string,
  |},
  +voidFunc: () => void,
  +getBool: (arg: boolean) => boolean,
  +getNumber: (arg: number) => number,
  +getString: (arg: string) => string,
  +getArray: (arg: Array<any>) => Array<any>,
  +getObject: (arg: Object) => Object,
  +getRootTag: (arg: RootTag) => RootTag,
  +getValue: (x: number, y: string, z: Object) => Object,
  +getValueWithCallback: (callback: (value: string) => void) => void,
  +getValueWithPromise: (error: boolean) => Promise<string>,
}
export default (TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule', __getModuleSchema()): Spec);

function __getModuleSchema() {
  if (!(global.RN$JSTurboModuleCodegenEnabled === true)) {
    return undefined;
  }

  return {
    \\"type\\": \\"NativeModule\\",
    \\"aliases\\": {},
    \\"spec\\": {
      \\"properties\\": [{
        \\"name\\": \\"getConstants\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ObjectTypeAnnotation\\",
            \\"properties\\": [{
              \\"name\\": \\"const1\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"BooleanTypeAnnotation\\"
              }
            }, {
              \\"name\\": \\"const2\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"NumberTypeAnnotation\\"
              }
            }, {
              \\"name\\": \\"const3\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"StringTypeAnnotation\\"
              }
            }]
          },
          \\"params\\": []
        }
      }, {
        \\"name\\": \\"voidFunc\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"VoidTypeAnnotation\\"
          },
          \\"params\\": []
        }
      }, {
        \\"name\\": \\"getBool\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"BooleanTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"BooleanTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getNumber\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"NumberTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"NumberTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getString\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"StringTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"StringTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getArray\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ArrayTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"ArrayTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getObject\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"GenericObjectTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"GenericObjectTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getRootTag\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ReservedTypeAnnotation\\",
            \\"name\\": \\"RootTag\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"ReservedTypeAnnotation\\",
              \\"name\\": \\"RootTag\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getValue\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"GenericObjectTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"x\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"NumberTypeAnnotation\\"
            }
          }, {
            \\"name\\": \\"y\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"StringTypeAnnotation\\"
            }
          }, {
            \\"name\\": \\"z\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"GenericObjectTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getValueWithCallback\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"VoidTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"callback\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"FunctionTypeAnnotation\\",
              \\"returnTypeAnnotation\\": {
                \\"type\\": \\"VoidTypeAnnotation\\"
              },
              \\"params\\": [{
                \\"name\\": \\"value\\",
                \\"optional\\": false,
                \\"typeAnnotation\\": {
                  \\"type\\": \\"StringTypeAnnotation\\"
                }
              }]
            }
          }]
        }
      }, {
        \\"name\\": \\"getValueWithPromise\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"PromiseTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"error\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"BooleanTypeAnnotation\\"
            }
          }]
        }
      }]
    },
    \\"moduleNames\\": [\\"SampleTurboModule\\"]
  };
}"
`;

exports[`Babel plugin inline view configs can inline config for NativeSampleTurboModule1.js 1`] = `
"// @flow
import type { RootTag, TurboModule } from '../RCTExport';
import * as TurboModuleRegistry from '../TurboModuleRegistry';
export interface Spec extends TurboModule {
  // Exported methods.
  +getConstants: () => {|
    const1: boolean,
    const2: number,
    const3: string,
  |},
  +voidFunc: () => void,
  +getBool: (arg: boolean) => boolean,
  +getNumber: (arg: number) => number,
  +getString: (arg: string) => string,
  +getArray: (arg: Array<any>) => Array<any>,
  +getObject: (arg: Object) => Object,
  +getRootTag: (arg: RootTag) => RootTag,
  +getValue: (x: number, y: string, z: Object) => Object,
  +getValueWithCallback: (callback: (value: string) => void) => void,
  +getValueWithPromise: (error: boolean) => Promise<string>,
}
const module = TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule', __getModuleSchema());
export default (module: Spec);

function __getModuleSchema() {
  if (!(global.RN$JSTurboModuleCodegenEnabled === true)) {
    return undefined;
  }

  return {
    \\"type\\": \\"NativeModule\\",
    \\"aliases\\": {},
    \\"spec\\": {
      \\"properties\\": [{
        \\"name\\": \\"getConstants\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ObjectTypeAnnotation\\",
            \\"properties\\": [{
              \\"name\\": \\"const1\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"BooleanTypeAnnotation\\"
              }
            }, {
              \\"name\\": \\"const2\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"NumberTypeAnnotation\\"
              }
            }, {
              \\"name\\": \\"const3\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"StringTypeAnnotation\\"
              }
            }]
          },
          \\"params\\": []
        }
      }, {
        \\"name\\": \\"voidFunc\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"VoidTypeAnnotation\\"
          },
          \\"params\\": []
        }
      }, {
        \\"name\\": \\"getBool\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"BooleanTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"BooleanTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getNumber\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"NumberTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"NumberTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getString\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"StringTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"StringTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getArray\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ArrayTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"ArrayTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getObject\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"GenericObjectTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"GenericObjectTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getRootTag\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ReservedTypeAnnotation\\",
            \\"name\\": \\"RootTag\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"ReservedTypeAnnotation\\",
              \\"name\\": \\"RootTag\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getValue\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"GenericObjectTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"x\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"NumberTypeAnnotation\\"
            }
          }, {
            \\"name\\": \\"y\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"StringTypeAnnotation\\"
            }
          }, {
            \\"name\\": \\"z\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"GenericObjectTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getValueWithCallback\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"VoidTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"callback\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"FunctionTypeAnnotation\\",
              \\"returnTypeAnnotation\\": {
                \\"type\\": \\"VoidTypeAnnotation\\"
              },
              \\"params\\": [{
                \\"name\\": \\"value\\",
                \\"optional\\": false,
                \\"typeAnnotation\\": {
                  \\"type\\": \\"StringTypeAnnotation\\"
                }
              }]
            }
          }]
        }
      }, {
        \\"name\\": \\"getValueWithPromise\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"PromiseTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"error\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"BooleanTypeAnnotation\\"
            }
          }]
        }
      }]
    },
    \\"moduleNames\\": [\\"SampleTurboModule\\"]
  };
}"
`;

exports[`Babel plugin inline view configs can inline config for NativeSampleTurboModule2.js 1`] = `
"// @flow
import type { RootTag, TurboModule } from '../RCTExport';
import * as TurboModuleRegistry from '../TurboModuleRegistry';
export interface Spec extends TurboModule {
  // Exported methods.
  +getConstants: () => {|
    const1: boolean,
    const2: number,
    const3: string,
  |},
  +voidFunc: () => void,
  +getBool: (arg: boolean) => boolean,
  +getNumber: (arg: number) => number,
  +getString: (arg: string) => string,
  +getArray: (arg: Array<any>) => Array<any>,
  +getObject: (arg: Object) => Object,
  +getRootTag: (arg: RootTag) => RootTag,
  +getValue: (x: number, y: string, z: Object) => Object,
  +getValueWithCallback: (callback: (value: string) => void) => void,
  +getValueWithPromise: (error: boolean) => Promise<string>,
}
export default (TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule', __getModuleSchema()) || TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule2', __getModuleSchema()): Spec);

function __getModuleSchema() {
  if (!(global.RN$JSTurboModuleCodegenEnabled === true)) {
    return undefined;
  }

  return {
    \\"type\\": \\"NativeModule\\",
    \\"aliases\\": {},
    \\"spec\\": {
      \\"properties\\": [{
        \\"name\\": \\"getConstants\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ObjectTypeAnnotation\\",
            \\"properties\\": [{
              \\"name\\": \\"const1\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"BooleanTypeAnnotation\\"
              }
            }, {
              \\"name\\": \\"const2\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"NumberTypeAnnotation\\"
              }
            }, {
              \\"name\\": \\"const3\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"StringTypeAnnotation\\"
              }
            }]
          },
          \\"params\\": []
        }
      }, {
        \\"name\\": \\"voidFunc\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"VoidTypeAnnotation\\"
          },
          \\"params\\": []
        }
      }, {
        \\"name\\": \\"getBool\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"BooleanTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"BooleanTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getNumber\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"NumberTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"NumberTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getString\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"StringTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"StringTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getArray\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ArrayTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"ArrayTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getObject\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"GenericObjectTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"GenericObjectTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getRootTag\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ReservedTypeAnnotation\\",
            \\"name\\": \\"RootTag\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"ReservedTypeAnnotation\\",
              \\"name\\": \\"RootTag\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getValue\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"GenericObjectTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"x\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"NumberTypeAnnotation\\"
            }
          }, {
            \\"name\\": \\"y\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"StringTypeAnnotation\\"
            }
          }, {
            \\"name\\": \\"z\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"GenericObjectTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getValueWithCallback\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"VoidTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"callback\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"FunctionTypeAnnotation\\",
              \\"returnTypeAnnotation\\": {
                \\"type\\": \\"VoidTypeAnnotation\\"
              },
              \\"params\\": [{
                \\"name\\": \\"value\\",
                \\"optional\\": false,
                \\"typeAnnotation\\": {
                  \\"type\\": \\"StringTypeAnnotation\\"
                }
              }]
            }
          }]
        }
      }, {
        \\"name\\": \\"getValueWithPromise\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"PromiseTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"error\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"BooleanTypeAnnotation\\"
            }
          }]
        }
      }]
    },
    \\"moduleNames\\": [\\"SampleTurboModule\\", \\"SampleTurboModule2\\"]
  };
}"
`;

exports[`Babel plugin inline view configs can inline config for NativeSampleTurboModule3.js 1`] = `
"// @flow
import type { RootTag, TurboModule } from '../RCTExport';
import * as TurboModuleRegistry from '../TurboModuleRegistry';
export interface Spec extends TurboModule {
  // Exported methods.
  +getConstants: () => {|
    const1: boolean,
    const2: number,
    const3: string,
  |},
  +voidFunc: () => void,
  +getBool: (arg: boolean) => boolean,
  +getNumber: (arg: number) => number,
  +getString: (arg: string) => string,
  +getArray: (arg: Array<any>) => Array<any>,
  +getObject: (arg: Object) => Object,
  +getRootTag: (arg: RootTag) => RootTag,
  +getValue: (x: number, y: string, z: Object) => Object,
  +getValueWithCallback: (callback: (value: string) => void) => void,
  +getValueWithPromise: (error: boolean) => Promise<string>,
}
const module1 = TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule', __getModuleSchema());
const module2 = TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule2', __getModuleSchema());
export default (module1 || module2: Spec);

function __getModuleSchema() {
  if (!(global.RN$JSTurboModuleCodegenEnabled === true)) {
    return undefined;
  }

  return {
    \\"type\\": \\"NativeModule\\",
    \\"aliases\\": {},
    \\"spec\\": {
      \\"properties\\": [{
        \\"name\\": \\"getConstants\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ObjectTypeAnnotation\\",
            \\"properties\\": [{
              \\"name\\": \\"const1\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"BooleanTypeAnnotation\\"
              }
            }, {
              \\"name\\": \\"const2\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"NumberTypeAnnotation\\"
              }
            }, {
              \\"name\\": \\"const3\\",
              \\"optional\\": false,
              \\"typeAnnotation\\": {
                \\"type\\": \\"StringTypeAnnotation\\"
              }
            }]
          },
          \\"params\\": []
        }
      }, {
        \\"name\\": \\"voidFunc\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"VoidTypeAnnotation\\"
          },
          \\"params\\": []
        }
      }, {
        \\"name\\": \\"getBool\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"BooleanTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"BooleanTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getNumber\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"NumberTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"NumberTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getString\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"StringTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"StringTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getArray\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ArrayTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"ArrayTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getObject\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"GenericObjectTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"GenericObjectTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getRootTag\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"ReservedTypeAnnotation\\",
            \\"name\\": \\"RootTag\\"
          },
          \\"params\\": [{
            \\"name\\": \\"arg\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"ReservedTypeAnnotation\\",
              \\"name\\": \\"RootTag\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getValue\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"GenericObjectTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"x\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"NumberTypeAnnotation\\"
            }
          }, {
            \\"name\\": \\"y\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"StringTypeAnnotation\\"
            }
          }, {
            \\"name\\": \\"z\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"GenericObjectTypeAnnotation\\"
            }
          }]
        }
      }, {
        \\"name\\": \\"getValueWithCallback\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"VoidTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"callback\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"FunctionTypeAnnotation\\",
              \\"returnTypeAnnotation\\": {
                \\"type\\": \\"VoidTypeAnnotation\\"
              },
              \\"params\\": [{
                \\"name\\": \\"value\\",
                \\"optional\\": false,
                \\"typeAnnotation\\": {
                  \\"type\\": \\"StringTypeAnnotation\\"
                }
              }]
            }
          }]
        }
      }, {
        \\"name\\": \\"getValueWithPromise\\",
        \\"optional\\": false,
        \\"typeAnnotation\\": {
          \\"type\\": \\"FunctionTypeAnnotation\\",
          \\"returnTypeAnnotation\\": {
            \\"type\\": \\"PromiseTypeAnnotation\\"
          },
          \\"params\\": [{
            \\"name\\": \\"error\\",
            \\"optional\\": false,
            \\"typeAnnotation\\": {
              \\"type\\": \\"BooleanTypeAnnotation\\"
            }
          }]
        }
      }]
    },
    \\"moduleNames\\": [\\"SampleTurboModule\\", \\"SampleTurboModule2\\"]
  };
}"
`;

exports[`Babel plugin inline view configs can inline config for NotANativeComponent.js 1`] = `
"const requireNativeComponent = require('requireNativeComponent');

export default 'Not a view config';"
`;

exports[`Babel plugin inline view configs fails on inline config for CommandsExportedWithDifferentNameNativeComponent.js 1`] = `
"/CommandsExportedWithDifferentNameNativeComponent.js: Native commands must be exported with the name 'Commands'
  17 | }
  18 | 
> 19 | export const Foo = codegenNativeCommands<NativeCommands>();
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  20 | 
  21 | export default (codegenNativeComponent<ModuleProps>('Module'): NativeType);
  22 | "
`;

exports[`Babel plugin inline view configs fails on inline config for CommandsExportedWithShorthandNativeComponent.js 1`] = `
"/CommandsExportedWithShorthandNativeComponent.js: 'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.
  19 | const Commands = 4;
  20 | 
> 21 | export {Commands};
     | ^^^^^^^^^^^^^^^^^^
  22 | 
  23 | export default (codegenNativeComponent<ModuleProps>('Module'): NativeType);
  24 | "
`;

exports[`Babel plugin inline view configs fails on inline config for OtherCommandsExportNativeComponent.js 1`] = `
"/OtherCommandsExportNativeComponent.js: 'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.
  17 | }
  18 | 
> 19 | export const Commands = 4;
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^
  20 | 
  21 | export default (codegenNativeComponent<ModuleProps>('Module'): NativeType);
  22 | "
`;
