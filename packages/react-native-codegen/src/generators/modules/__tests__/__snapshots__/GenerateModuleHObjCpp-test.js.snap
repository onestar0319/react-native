// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GenerateModuleHObjCpp can generate fixture COMPLEX_OBJECTS 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>



namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecOptionalsAOptionalObjectProperty {
      double x() const;
      double y() const;

      SpecOptionalsAOptionalObjectProperty(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecOptionalsAOptionalObjectProperty)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecOptionalsAOptionalObjectProperty:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecDifficultAE {
      bool D() const;
      double E() const;
      NSString *F() const;
      double id_() const;

      SpecDifficultAE(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecDifficultAE)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultAE:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecOptionalsA {
      folly::Optional<double> optionalNumberProperty() const;
      folly::Optional<facebook::react::LazyVector<id<NSObject>>> optionalArrayProperty() const;
      folly::Optional<JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty> optionalObjectProperty() const;
      id<NSObject> _Nullable optionalGenericObjectProperty() const;
      folly::Optional<bool> optionalBooleanTypeProperty() const;

      SpecOptionalsA(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecOptionalsA)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecOptionalsA:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecDifficultReturnType {
      bool D() const;
      double E() const;
      NSString *F() const;

      SpecDifficultReturnType(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecDifficultReturnType)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultReturnType:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecDifficultA {
      bool D() const;
      JS::NativeSampleTurboModule::SpecDifficultAE E() const;
      NSString *F() const;

      SpecDifficultA(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecDifficultA)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultA:(id)json;
@end

inline bool JS::NativeSampleTurboModule::SpecDifficultA::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}


inline JS::NativeSampleTurboModule::SpecDifficultAE JS::NativeSampleTurboModule::SpecDifficultA::E() const
{
  id const p = _v[@\\"E\\"];
  return JS::NativeSampleTurboModule::SpecDifficultAE(p);
}


inline NSString *JS::NativeSampleTurboModule::SpecDifficultA::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}


inline bool JS::NativeSampleTurboModule::SpecDifficultReturnType::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}


inline double JS::NativeSampleTurboModule::SpecDifficultReturnType::E() const
{
  id const p = _v[@\\"E\\"];
  return RCTBridgingToDouble(p);
}


inline NSString *JS::NativeSampleTurboModule::SpecDifficultReturnType::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}


inline folly::Optional<double> JS::NativeSampleTurboModule::SpecOptionalsA::optionalNumberProperty() const
{
  id const p = _v[@\\"optionalNumberProperty\\"];
  return RCTBridgingToOptionalDouble(p);
}


inline folly::Optional<facebook::react::LazyVector<id<NSObject>>> JS::NativeSampleTurboModule::SpecOptionalsA::optionalArrayProperty() const
{
  id const p = _v[@\\"optionalArrayProperty\\"];
  return RCTBridgingToOptionalVec(p, ^id<NSObject>(id itemValue_0) { return itemValue_0; });
}


inline folly::Optional<JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty> JS::NativeSampleTurboModule::SpecOptionalsA::optionalObjectProperty() const
{
  id const p = _v[@\\"optionalObjectProperty\\"];
  return (p == nil ? folly::none : folly::make_optional(JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty(p)));
}


inline id<NSObject> _Nullable JS::NativeSampleTurboModule::SpecOptionalsA::optionalGenericObjectProperty() const
{
  id const p = _v[@\\"optionalGenericObjectProperty\\"];
  return p;
}


inline folly::Optional<bool> JS::NativeSampleTurboModule::SpecOptionalsA::optionalBooleanTypeProperty() const
{
  id const p = _v[@\\"optionalBooleanTypeProperty\\"];
  return RCTBridgingToOptionalBool(p);
}


inline bool JS::NativeSampleTurboModule::SpecDifficultAE::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}


inline double JS::NativeSampleTurboModule::SpecDifficultAE::E() const
{
  id const p = _v[@\\"E\\"];
  return RCTBridgingToDouble(p);
}


inline NSString *JS::NativeSampleTurboModule::SpecDifficultAE::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}


inline double JS::NativeSampleTurboModule::SpecDifficultAE::id_() const
{
  id const p = _v[@\\"id_\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty::x() const
{
  id const p = _v[@\\"x\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty::y() const
{
  id const p = _v[@\\"y\\"];
  return RCTBridgingToDouble(p);
}



@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
- (NSDictionary *) difficult:(JS::NativeSampleTurboModule::SpecDifficultA&)A;
- (void) optionals:(JS::NativeSampleTurboModule::SpecOptionalsA&)A;
- (void) optionalMethod:(NSDictionary *)options
   callback:(RCTResponseSenderBlock)callback
   extras:(NSArray * _Nullable)extras;
@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'SampleTurboModule'
    */
    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture EMPTY_NATIVE_MODULES 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>





@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'SampleTurboModule'
    */
    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture SIMPLE_NATIVE_MODULES 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>



namespace JS {
  namespace NativeSampleTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<bool> const1;
          RCTRequired<double> const2;
          RCTRequired<NSString *> const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

inline JS::NativeSampleTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = @(const1);
auto const2 = i.const2.get();
  d[@\\"const2\\"] = @(const2);
auto const3 = i.const3.get();
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}


@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)getConstants;
- (void) voidFunc;
- (BOOL) getBool:(BOOL)arg;
- (NSNumber *) getNumber:(double)arg;
- (NSString *) getString:(NSString *)arg;
- (NSArray<id<NSObject>> *) getArray:(NSArray *)arg;
- (NSDictionary *) getObject:(NSDictionary *)arg;
- (NSNumber *) getRootTag:(double)arg;
- (NSDictionary *) getValue:(double)x
   y:(NSString *)y
   z:(NSDictionary *)z;
- (void) getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void) getValueWithPromise:(BOOL)error
   resolve:(RCTPromiseResolveBlock)resolve
   reject:(RCTPromiseRejectBlock)reject;
@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'SampleTurboModule'
    */
    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture TWO_MODULES_DIFFERENT_FILES 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>





@protocol NativeSample2TurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void) voidFunc;
@end





@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
- (void) voidFunc;
@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'SampleTurboModule'
    */
    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
    /**
    * ObjC++ class for module 'Sample2TurboModule'
    */
    class JSI_EXPORT NativeSample2TurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSample2TurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture TWO_MODULES_SAME_FILE 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>





@protocol NativeSample2TurboModuleSpec <RCTBridgeModule, RCTTurboModule>
- (void) voidFunc;
@end





@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
- (void) voidFunc;
@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'SampleTurboModule'
    */
    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
    /**
    * ObjC++ class for module 'Sample2TurboModule'
    */
    class JSI_EXPORT NativeSample2TurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSample2TurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;
