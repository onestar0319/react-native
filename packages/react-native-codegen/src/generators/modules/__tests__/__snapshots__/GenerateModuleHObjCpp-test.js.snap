// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GenerateModuleHObjCpp can generate fixture COMPLEX_OBJECTS 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>



namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecOptionalsAOptionalObjectProperty {
      double x() const;
      double y() const;

      SpecOptionalsAOptionalObjectProperty(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecOptionalsAOptionalObjectProperty)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecOptionalsAOptionalObjectProperty:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecDifficultAE {
      bool D() const;
      double E() const;
      NSString *F() const;
      double id_() const;

      SpecDifficultAE(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecDifficultAE)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultAE:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecGetArraysOptionsArrayOfObjectsElement {
      double numberProperty() const;

      SpecGetArraysOptionsArrayOfObjectsElement(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecGetArraysOptionsArrayOfObjectsElement)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetArraysOptionsArrayOfObjectsElement:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecGetArraysOptions {
      facebook::react::LazyVector<double> arrayOfNumbers() const;
      folly::Optional<facebook::react::LazyVector<double>> optionalArrayOfNumbers() const;
      facebook::react::LazyVector<NSString *> arrayOfStrings() const;
      folly::Optional<facebook::react::LazyVector<NSString *>> optionalArrayOfStrings() const;
      facebook::react::LazyVector<JS::NativeSampleTurboModule::arrayOfObjectsElement> arrayOfObjects() const;

      SpecGetArraysOptions(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecGetArraysOptions)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetArraysOptions:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecOptionalMethodExtrasElement {
      NSString *key() const;
      id<NSObject> value() const;

      SpecOptionalMethodExtrasElement(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecOptionalMethodExtrasElement)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecOptionalMethodExtrasElement:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecOptionalsA {
      folly::Optional<double> optionalNumberProperty() const;
      folly::Optional<facebook::react::LazyVector<double>> optionalArrayProperty() const;
      folly::Optional<JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty> optionalObjectProperty() const;
      id<NSObject> _Nullable optionalGenericObjectProperty() const;
      folly::Optional<bool> optionalBooleanTypeProperty() const;

      SpecOptionalsA(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecOptionalsA)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecOptionalsA:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecDifficultReturnType {
      bool D() const;
      double E() const;
      NSString *F() const;

      SpecDifficultReturnType(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecDifficultReturnType)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultReturnType:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecDifficultA {
      bool D() const;
      JS::NativeSampleTurboModule::SpecDifficultAE E() const;
      NSString *F() const;

      SpecDifficultA(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecDifficultA)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultA:(id)json;
@end

inline bool JS::NativeSampleTurboModule::SpecDifficultA::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}


inline JS::NativeSampleTurboModule::SpecDifficultAE JS::NativeSampleTurboModule::SpecDifficultA::E() const
{
  id const p = _v[@\\"E\\"];
  return JS::NativeSampleTurboModule::SpecDifficultAE(p);
}


inline NSString *JS::NativeSampleTurboModule::SpecDifficultA::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}


inline bool JS::NativeSampleTurboModule::SpecDifficultReturnType::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}


inline double JS::NativeSampleTurboModule::SpecDifficultReturnType::E() const
{
  id const p = _v[@\\"E\\"];
  return RCTBridgingToDouble(p);
}


inline NSString *JS::NativeSampleTurboModule::SpecDifficultReturnType::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}


inline folly::Optional<double> JS::NativeSampleTurboModule::SpecOptionalsA::optionalNumberProperty() const
{
  id const p = _v[@\\"optionalNumberProperty\\"];
  return RCTBridgingToOptionalDouble(p);
}


inline folly::Optional<facebook::react::LazyVector<double>> JS::NativeSampleTurboModule::SpecOptionalsA::optionalArrayProperty() const
{
  id const p = _v[@\\"optionalArrayProperty\\"];
  return RCTBridgingToOptionalVec(p, ^double(id itemValue_0) { return RCTBridgingToDouble(itemValue_0); });
}


inline folly::Optional<JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty> JS::NativeSampleTurboModule::SpecOptionalsA::optionalObjectProperty() const
{
  id const p = _v[@\\"optionalObjectProperty\\"];
  return (p == nil ? folly::none : folly::make_optional(JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty(p)));
}


inline id<NSObject> _Nullable JS::NativeSampleTurboModule::SpecOptionalsA::optionalGenericObjectProperty() const
{
  id const p = _v[@\\"optionalGenericObjectProperty\\"];
  return p;
}


inline folly::Optional<bool> JS::NativeSampleTurboModule::SpecOptionalsA::optionalBooleanTypeProperty() const
{
  id const p = _v[@\\"optionalBooleanTypeProperty\\"];
  return RCTBridgingToOptionalBool(p);
}


inline NSString *JS::NativeSampleTurboModule::SpecOptionalMethodExtrasElement::key() const
{
  id const p = _v[@\\"key\\"];
  return RCTBridgingToString(p);
}


inline id<NSObject> JS::NativeSampleTurboModule::SpecOptionalMethodExtrasElement::value() const
{
  id const p = _v[@\\"value\\"];
  return p;
}


inline facebook::react::LazyVector<double> JS::NativeSampleTurboModule::SpecGetArraysOptions::arrayOfNumbers() const
{
  id const p = _v[@\\"arrayOfNumbers\\"];
  return RCTBridgingToVec(p, ^double(id itemValue_0) { return RCTBridgingToDouble(itemValue_0); });
}


inline folly::Optional<facebook::react::LazyVector<double>> JS::NativeSampleTurboModule::SpecGetArraysOptions::optionalArrayOfNumbers() const
{
  id const p = _v[@\\"optionalArrayOfNumbers\\"];
  return RCTBridgingToOptionalVec(p, ^double(id itemValue_0) { return RCTBridgingToDouble(itemValue_0); });
}


inline facebook::react::LazyVector<NSString *> JS::NativeSampleTurboModule::SpecGetArraysOptions::arrayOfStrings() const
{
  id const p = _v[@\\"arrayOfStrings\\"];
  return RCTBridgingToVec(p, ^NSString *(id itemValue_0) { return RCTBridgingToString(itemValue_0); });
}


inline folly::Optional<facebook::react::LazyVector<NSString *>> JS::NativeSampleTurboModule::SpecGetArraysOptions::optionalArrayOfStrings() const
{
  id const p = _v[@\\"optionalArrayOfStrings\\"];
  return RCTBridgingToOptionalVec(p, ^NSString *(id itemValue_0) { return RCTBridgingToString(itemValue_0); });
}


inline facebook::react::LazyVector<JS::NativeSampleTurboModule::arrayOfObjectsElement> JS::NativeSampleTurboModule::SpecGetArraysOptions::arrayOfObjects() const
{
  id const p = _v[@\\"arrayOfObjects\\"];
  return RCTBridgingToVec(p, ^JS::NativeSampleTurboModule::arrayOfObjectsElement(id itemValue_0) { return JS::NativeSampleTurboModule::arrayOfObjectsElement(itemValue_0); });
}


inline double JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement::numberProperty() const
{
  id const p = _v[@\\"numberProperty\\"];
  return RCTBridgingToDouble(p);
}


inline bool JS::NativeSampleTurboModule::SpecDifficultAE::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}


inline double JS::NativeSampleTurboModule::SpecDifficultAE::E() const
{
  id const p = _v[@\\"E\\"];
  return RCTBridgingToDouble(p);
}


inline NSString *JS::NativeSampleTurboModule::SpecDifficultAE::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}


inline double JS::NativeSampleTurboModule::SpecDifficultAE::id_() const
{
  id const p = _v[@\\"id_\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty::x() const
{
  id const p = _v[@\\"x\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty::y() const
{
  id const p = _v[@\\"y\\"];
  return RCTBridgingToDouble(p);
}



@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
- (NSDictionary *) difficult:(JS::NativeSampleTurboModule::SpecDifficultA &)A;
- (void) optionals:(JS::NativeSampleTurboModule::SpecOptionalsA &)A;
- (void) optionalMethod:(NSDictionary *)options
   callback:(RCTResponseSenderBlock)callback
   extras:(NSArray * _Nullable)extras;
- (void) getArrays:(JS::NativeSampleTurboModule::SpecGetArraysOptions &)options;
@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'SampleTurboModule'
    */
    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture EMPTY_NATIVE_MODULES 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>





@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'SampleTurboModule'
    */
    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture NATIVE_MODULES_WITH_TYPE_ALIASES 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>



namespace JS {
  namespace NativeAliasTurboModule {
    struct OptionsDisplaySize {
      double width() const;
      double height() const;

      OptionsDisplaySize(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeAliasTurboModule_OptionsDisplaySize)
+ (RCTManagedPointer *)JS_NativeAliasTurboModule_OptionsDisplaySize:(id)json;
@end


namespace JS {
  namespace NativeAliasTurboModule {
    struct OptionsSize {
      double width() const;
      double height() const;

      OptionsSize(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeAliasTurboModule_OptionsSize)
+ (RCTManagedPointer *)JS_NativeAliasTurboModule_OptionsSize:(id)json;
@end


namespace JS {
  namespace NativeAliasTurboModule {
    struct OptionsOffset {
      double x() const;
      double y() const;

      OptionsOffset(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeAliasTurboModule_OptionsOffset)
+ (RCTManagedPointer *)JS_NativeAliasTurboModule_OptionsOffset:(id)json;
@end


namespace JS {
  namespace NativeAliasTurboModule {
    struct Options {
      JS::NativeAliasTurboModule::OptionsOffset offset() const;
      JS::NativeAliasTurboModule::OptionsSize size() const;
      folly::Optional<JS::NativeAliasTurboModule::OptionsDisplaySize> displaySize() const;
      NSString *resizeMode() const;
      folly::Optional<bool> allowExternalStorage() const;

      Options(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeAliasTurboModule_Options)
+ (RCTManagedPointer *)JS_NativeAliasTurboModule_Options:(id)json;
@end

inline JS::NativeAliasTurboModule::OptionsOffset JS::NativeAliasTurboModule::Options::offset() const
{
  id const p = _v[@\\"offset\\"];
  return JS::NativeAliasTurboModule::OptionsOffset(p);
}


inline JS::NativeAliasTurboModule::OptionsSize JS::NativeAliasTurboModule::Options::size() const
{
  id const p = _v[@\\"size\\"];
  return JS::NativeAliasTurboModule::OptionsSize(p);
}


inline folly::Optional<JS::NativeAliasTurboModule::OptionsDisplaySize> JS::NativeAliasTurboModule::Options::displaySize() const
{
  id const p = _v[@\\"displaySize\\"];
  return (p == nil ? folly::none : folly::make_optional(JS::NativeAliasTurboModule::OptionsDisplaySize(p)));
}


inline NSString *JS::NativeAliasTurboModule::Options::resizeMode() const
{
  id const p = _v[@\\"resizeMode\\"];
  return RCTBridgingToString(p);
}


inline folly::Optional<bool> JS::NativeAliasTurboModule::Options::allowExternalStorage() const
{
  id const p = _v[@\\"allowExternalStorage\\"];
  return RCTBridgingToOptionalBool(p);
}


inline double JS::NativeAliasTurboModule::OptionsOffset::x() const
{
  id const p = _v[@\\"x\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeAliasTurboModule::OptionsOffset::y() const
{
  id const p = _v[@\\"y\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeAliasTurboModule::OptionsSize::width() const
{
  id const p = _v[@\\"width\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeAliasTurboModule::OptionsSize::height() const
{
  id const p = _v[@\\"height\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeAliasTurboModule::OptionsDisplaySize::width() const
{
  id const p = _v[@\\"width\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeAliasTurboModule::OptionsDisplaySize::height() const
{
  id const p = _v[@\\"height\\"];
  return RCTBridgingToDouble(p);
}



@protocol NativeAliasTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void) cropImage:(JS::NativeAliasTurboModule::Options &)cropData;
@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'AliasTurboModule'
    */
    class JSI_EXPORT NativeAliasTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeAliasTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture REAL_MODULE_EXAMPLE 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>



namespace JS {
  namespace NativeCameraRollManager {
    struct PhotoIdentifierNodeLocation {
      double longitude() const;
      double latitude() const;
      folly::Optional<double> altitude() const;
      folly::Optional<double> heading() const;
      folly::Optional<double> speed() const;

      PhotoIdentifierNodeLocation(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeCameraRollManager_PhotoIdentifierNodeLocation)
+ (RCTManagedPointer *)JS_NativeCameraRollManager_PhotoIdentifierNodeLocation:(id)json;
@end


namespace JS {
  namespace NativeCameraRollManager {
    struct PhotoIdentifierNode {
      JS::NativeCameraRollManager::PhotoIdentifierImage image() const;
      NSString *type() const;
      NSString *group_name() const;
      double timestamp() const;
      JS::NativeCameraRollManager::PhotoIdentifierNodeLocation location() const;

      PhotoIdentifierNode(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeCameraRollManager_PhotoIdentifierNode)
+ (RCTManagedPointer *)JS_NativeCameraRollManager_PhotoIdentifierNode:(id)json;
@end


namespace JS {
  namespace NativeCameraRollManager {
    struct PhotoIdentifiersPagePage_info {
      bool has_next_page() const;
      NSString *start_cursor() const;
      NSString *end_cursor() const;

      PhotoIdentifiersPagePage_info(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeCameraRollManager_PhotoIdentifiersPagePage_info)
+ (RCTManagedPointer *)JS_NativeCameraRollManager_PhotoIdentifiersPagePage_info:(id)json;
@end


namespace JS {
  namespace NativeCameraRollManager {
    struct PhotoIdentifierImage {
      NSString *uri() const;
      double playableDuration() const;
      double width() const;
      double height() const;
      folly::Optional<bool> isStored() const;
      NSString *filename() const;

      PhotoIdentifierImage(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeCameraRollManager_PhotoIdentifierImage)
+ (RCTManagedPointer *)JS_NativeCameraRollManager_PhotoIdentifierImage:(id)json;
@end


namespace JS {
  namespace NativeCameraRollManager {
    struct PhotoIdentifier {
      JS::NativeCameraRollManager::PhotoIdentifierNode node() const;

      PhotoIdentifier(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeCameraRollManager_PhotoIdentifier)
+ (RCTManagedPointer *)JS_NativeCameraRollManager_PhotoIdentifier:(id)json;
@end


namespace JS {
  namespace NativeCameraRollManager {
    struct PhotoIdentifiersPage {
      facebook::react::LazyVector<JS::NativeCameraRollManager::PhotoIdentifier> edges() const;
      JS::NativeCameraRollManager::PhotoIdentifiersPagePage_info page_info() const;

      PhotoIdentifiersPage(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeCameraRollManager_PhotoIdentifiersPage)
+ (RCTManagedPointer *)JS_NativeCameraRollManager_PhotoIdentifiersPage:(id)json;
@end


namespace JS {
  namespace NativeCameraRollManager {
    struct GetPhotosParams {
      double first() const;
      NSString *after() const;
      NSString *groupName() const;
      NSString *groupTypes() const;
      NSString *assetType() const;
      folly::Optional<double> maxSize() const;
      folly::Optional<facebook::react::LazyVector<NSString *>> mimeTypes() const;

      GetPhotosParams(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeCameraRollManager_GetPhotosParams)
+ (RCTManagedPointer *)JS_NativeCameraRollManager_GetPhotosParams:(id)json;
@end

inline double JS::NativeCameraRollManager::GetPhotosParams::first() const
{
  id const p = _v[@\\"first\\"];
  return RCTBridgingToDouble(p);
}


inline NSString *JS::NativeCameraRollManager::GetPhotosParams::after() const
{
  id const p = _v[@\\"after\\"];
  return RCTBridgingToString(p);
}


inline NSString *JS::NativeCameraRollManager::GetPhotosParams::groupName() const
{
  id const p = _v[@\\"groupName\\"];
  return RCTBridgingToString(p);
}


inline NSString *JS::NativeCameraRollManager::GetPhotosParams::groupTypes() const
{
  id const p = _v[@\\"groupTypes\\"];
  return RCTBridgingToString(p);
}


inline NSString *JS::NativeCameraRollManager::GetPhotosParams::assetType() const
{
  id const p = _v[@\\"assetType\\"];
  return RCTBridgingToString(p);
}


inline folly::Optional<double> JS::NativeCameraRollManager::GetPhotosParams::maxSize() const
{
  id const p = _v[@\\"maxSize\\"];
  return RCTBridgingToOptionalDouble(p);
}


inline folly::Optional<facebook::react::LazyVector<NSString *>> JS::NativeCameraRollManager::GetPhotosParams::mimeTypes() const
{
  id const p = _v[@\\"mimeTypes\\"];
  return RCTBridgingToOptionalVec(p, ^NSString *(id itemValue_0) { return RCTBridgingToString(itemValue_0); });
}


inline facebook::react::LazyVector<JS::NativeCameraRollManager::PhotoIdentifier> JS::NativeCameraRollManager::PhotoIdentifiersPage::edges() const
{
  id const p = _v[@\\"edges\\"];
  return RCTBridgingToVec(p, ^JS::NativeCameraRollManager::PhotoIdentifier(id itemValue_0) { return JS::NativeCameraRollManager::PhotoIdentifier(itemValue_0); });
}


inline JS::NativeCameraRollManager::PhotoIdentifiersPagePage_info JS::NativeCameraRollManager::PhotoIdentifiersPage::page_info() const
{
  id const p = _v[@\\"page_info\\"];
  return JS::NativeCameraRollManager::PhotoIdentifiersPagePage_info(p);
}


inline JS::NativeCameraRollManager::PhotoIdentifierNode JS::NativeCameraRollManager::PhotoIdentifier::node() const
{
  id const p = _v[@\\"node\\"];
  return JS::NativeCameraRollManager::PhotoIdentifierNode(p);
}


inline NSString *JS::NativeCameraRollManager::PhotoIdentifierImage::uri() const
{
  id const p = _v[@\\"uri\\"];
  return RCTBridgingToString(p);
}


inline double JS::NativeCameraRollManager::PhotoIdentifierImage::playableDuration() const
{
  id const p = _v[@\\"playableDuration\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeCameraRollManager::PhotoIdentifierImage::width() const
{
  id const p = _v[@\\"width\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeCameraRollManager::PhotoIdentifierImage::height() const
{
  id const p = _v[@\\"height\\"];
  return RCTBridgingToDouble(p);
}


inline folly::Optional<bool> JS::NativeCameraRollManager::PhotoIdentifierImage::isStored() const
{
  id const p = _v[@\\"isStored\\"];
  return RCTBridgingToOptionalBool(p);
}


inline NSString *JS::NativeCameraRollManager::PhotoIdentifierImage::filename() const
{
  id const p = _v[@\\"filename\\"];
  return RCTBridgingToString(p);
}


inline bool JS::NativeCameraRollManager::PhotoIdentifiersPagePage_info::has_next_page() const
{
  id const p = _v[@\\"has_next_page\\"];
  return RCTBridgingToBool(p);
}


inline NSString *JS::NativeCameraRollManager::PhotoIdentifiersPagePage_info::start_cursor() const
{
  id const p = _v[@\\"start_cursor\\"];
  return RCTBridgingToString(p);
}


inline NSString *JS::NativeCameraRollManager::PhotoIdentifiersPagePage_info::end_cursor() const
{
  id const p = _v[@\\"end_cursor\\"];
  return RCTBridgingToString(p);
}


inline JS::NativeCameraRollManager::PhotoIdentifierImage JS::NativeCameraRollManager::PhotoIdentifierNode::image() const
{
  id const p = _v[@\\"image\\"];
  return JS::NativeCameraRollManager::PhotoIdentifierImage(p);
}


inline NSString *JS::NativeCameraRollManager::PhotoIdentifierNode::type() const
{
  id const p = _v[@\\"type\\"];
  return RCTBridgingToString(p);
}


inline NSString *JS::NativeCameraRollManager::PhotoIdentifierNode::group_name() const
{
  id const p = _v[@\\"group_name\\"];
  return RCTBridgingToString(p);
}


inline double JS::NativeCameraRollManager::PhotoIdentifierNode::timestamp() const
{
  id const p = _v[@\\"timestamp\\"];
  return RCTBridgingToDouble(p);
}


inline JS::NativeCameraRollManager::PhotoIdentifierNodeLocation JS::NativeCameraRollManager::PhotoIdentifierNode::location() const
{
  id const p = _v[@\\"location\\"];
  return JS::NativeCameraRollManager::PhotoIdentifierNodeLocation(p);
}


inline double JS::NativeCameraRollManager::PhotoIdentifierNodeLocation::longitude() const
{
  id const p = _v[@\\"longitude\\"];
  return RCTBridgingToDouble(p);
}


inline double JS::NativeCameraRollManager::PhotoIdentifierNodeLocation::latitude() const
{
  id const p = _v[@\\"latitude\\"];
  return RCTBridgingToDouble(p);
}


inline folly::Optional<double> JS::NativeCameraRollManager::PhotoIdentifierNodeLocation::altitude() const
{
  id const p = _v[@\\"altitude\\"];
  return RCTBridgingToOptionalDouble(p);
}


inline folly::Optional<double> JS::NativeCameraRollManager::PhotoIdentifierNodeLocation::heading() const
{
  id const p = _v[@\\"heading\\"];
  return RCTBridgingToOptionalDouble(p);
}


inline folly::Optional<double> JS::NativeCameraRollManager::PhotoIdentifierNodeLocation::speed() const
{
  id const p = _v[@\\"speed\\"];
  return RCTBridgingToOptionalDouble(p);
}



@protocol NativeCameraRollManagerSpec <RCTBridgeModule, RCTTurboModule>

- (void) getPhotos:(JS::NativeCameraRollManager::GetPhotosParams &)params
   resolve:(RCTPromiseResolveBlock)resolve
   reject:(RCTPromiseRejectBlock)reject;
- (void) saveToCameraRoll:(NSString *)uri
   type:(NSString *)type
   resolve:(RCTPromiseResolveBlock)resolve
   reject:(RCTPromiseRejectBlock)reject;
- (void) deletePhotos:(NSArray *)assets
   resolve:(RCTPromiseResolveBlock)resolve
   reject:(RCTPromiseRejectBlock)reject;
@end



namespace JS {
  namespace NativeExceptionsManager {
    struct StackFrame {
      folly::Optional<double> column() const;
      NSString *file() const;
      folly::Optional<double> lineNumber() const;
      NSString *methodName() const;
      folly::Optional<bool> collapse() const;

      StackFrame(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeExceptionsManager_StackFrame)
+ (RCTManagedPointer *)JS_NativeExceptionsManager_StackFrame:(id)json;
@end


namespace JS {
  namespace NativeExceptionsManager {
    struct ExceptionData {
      NSString *message() const;
      NSString *originalMessage() const;
      NSString *name() const;
      NSString *componentStack() const;
      facebook::react::LazyVector<JS::NativeExceptionsManager::StackFrame> stack() const;
      double id_() const;
      bool isFatal() const;
      id<NSObject> _Nullable extraData() const;

      ExceptionData(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeExceptionsManager_ExceptionData)
+ (RCTManagedPointer *)JS_NativeExceptionsManager_ExceptionData:(id)json;
@end

inline NSString *JS::NativeExceptionsManager::ExceptionData::message() const
{
  id const p = _v[@\\"message\\"];
  return RCTBridgingToString(p);
}


inline NSString *JS::NativeExceptionsManager::ExceptionData::originalMessage() const
{
  id const p = _v[@\\"originalMessage\\"];
  return RCTBridgingToString(p);
}


inline NSString *JS::NativeExceptionsManager::ExceptionData::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToString(p);
}


inline NSString *JS::NativeExceptionsManager::ExceptionData::componentStack() const
{
  id const p = _v[@\\"componentStack\\"];
  return RCTBridgingToString(p);
}


inline facebook::react::LazyVector<JS::NativeExceptionsManager::StackFrame> JS::NativeExceptionsManager::ExceptionData::stack() const
{
  id const p = _v[@\\"stack\\"];
  return RCTBridgingToVec(p, ^JS::NativeExceptionsManager::StackFrame(id itemValue_0) { return JS::NativeExceptionsManager::StackFrame(itemValue_0); });
}


inline double JS::NativeExceptionsManager::ExceptionData::id_() const
{
  id const p = _v[@\\"id_\\"];
  return RCTBridgingToDouble(p);
}


inline bool JS::NativeExceptionsManager::ExceptionData::isFatal() const
{
  id const p = _v[@\\"isFatal\\"];
  return RCTBridgingToBool(p);
}


inline id<NSObject> _Nullable JS::NativeExceptionsManager::ExceptionData::extraData() const
{
  id const p = _v[@\\"extraData\\"];
  return p;
}


inline folly::Optional<double> JS::NativeExceptionsManager::StackFrame::column() const
{
  id const p = _v[@\\"column\\"];
  return RCTBridgingToOptionalDouble(p);
}


inline NSString *JS::NativeExceptionsManager::StackFrame::file() const
{
  id const p = _v[@\\"file\\"];
  return RCTBridgingToString(p);
}


inline folly::Optional<double> JS::NativeExceptionsManager::StackFrame::lineNumber() const
{
  id const p = _v[@\\"lineNumber\\"];
  return RCTBridgingToOptionalDouble(p);
}


inline NSString *JS::NativeExceptionsManager::StackFrame::methodName() const
{
  id const p = _v[@\\"methodName\\"];
  return RCTBridgingToString(p);
}


inline folly::Optional<bool> JS::NativeExceptionsManager::StackFrame::collapse() const
{
  id const p = _v[@\\"collapse\\"];
  return RCTBridgingToOptionalBool(p);
}



@protocol NativeExceptionsManagerSpec <RCTBridgeModule, RCTTurboModule>
- (void) reportFatalException:(NSString *)message
   stack:(NSArray *)stack
   exceptionId:(double)exceptionId;
- (void) reportSoftException:(NSString *)message
   stack:(NSArray *)stack
   exceptionId:(double)exceptionId;
- (void) reportException:(JS::NativeExceptionsManager::ExceptionData &)data;
- (void) updateExceptionMessage:(NSString *)message
   stack:(NSArray *)stack
   exceptionId:(double)exceptionId;
- (void) dismissRedbox;
@end



namespace JS {
  namespace NativeImagePickerIOS {
    struct SpecOpenCameraDialogConfig {
      bool unmirrorFrontFacingCamera() const;
      bool videoMode() const;

      SpecOpenCameraDialogConfig(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeImagePickerIOS_SpecOpenCameraDialogConfig)
+ (RCTManagedPointer *)JS_NativeImagePickerIOS_SpecOpenCameraDialogConfig:(id)json;
@end

inline bool JS::NativeImagePickerIOS::SpecOpenCameraDialogConfig::unmirrorFrontFacingCamera() const
{
  id const p = _v[@\\"unmirrorFrontFacingCamera\\"];
  return RCTBridgingToBool(p);
}


inline bool JS::NativeImagePickerIOS::SpecOpenCameraDialogConfig::videoMode() const
{
  id const p = _v[@\\"videoMode\\"];
  return RCTBridgingToBool(p);
}



@protocol NativeImagePickerIOSSpec <RCTBridgeModule, RCTTurboModule>
- (void) openCameraDialog:(JS::NativeImagePickerIOS::SpecOpenCameraDialogConfig &)config
   successCallback:(RCTResponseSenderBlock)successCallback
   cancelCallback:(RCTResponseSenderBlock)cancelCallback;
@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'CameraRollManager'
    */
    class JSI_EXPORT NativeCameraRollManagerSpecJSI : public ObjCTurboModule {
    public:
      NativeCameraRollManagerSpecJSI(const ObjCTurboModule::InitParams &params);
    };
    /**
    * ObjC++ class for module 'ExceptionsManager'
    */
    class JSI_EXPORT NativeExceptionsManagerSpecJSI : public ObjCTurboModule {
    public:
      NativeExceptionsManagerSpecJSI(const ObjCTurboModule::InitParams &params);
    };
    /**
    * ObjC++ class for module 'ImagePickerIOS'
    */
    class JSI_EXPORT NativeImagePickerIOSSpecJSI : public ObjCTurboModule {
    public:
      NativeImagePickerIOSSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture SIMPLE_NATIVE_MODULES 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>



namespace JS {
  namespace NativeSampleTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<bool> const1;
          RCTRequired<double> const2;
          RCTRequired<NSString *> const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

inline JS::NativeSampleTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = @(const1);
auto const2 = i.const2.get();
  d[@\\"const2\\"] = @(const2);
auto const3 = i.const3.get();
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}


@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)getConstants;
- (void) voidFunc;
- (BOOL) getBool:(BOOL)arg;
- (NSNumber *) getNumber:(double)arg;
- (NSString *) getString:(NSString *)arg;
- (NSArray<id<NSObject>> *) getArray:(NSArray *)arg;
- (NSDictionary *) getObject:(NSDictionary *)arg;
- (NSNumber *) getRootTag:(double)arg;
- (NSDictionary *) getValue:(double)x
   y:(NSString *)y
   z:(NSDictionary *)z;
- (void) getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void) getValueWithPromise:(BOOL)error
   resolve:(RCTPromiseResolveBlock)resolve
   reject:(RCTPromiseRejectBlock)reject;
@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'SampleTurboModule'
    */
    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture TWO_MODULES_DIFFERENT_FILES 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>





@protocol NativeSample2TurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void) voidFunc;
@end





@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
- (void) voidFunc;
@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'SampleTurboModule'
    */
    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
    /**
    * ObjC++ class for module 'Sample2TurboModule'
    */
    class JSI_EXPORT NativeSample2TurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSample2TurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture TWO_MODULES_SAME_FILE 1`] = `
Map {
  "SampleSpec.h" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>





@protocol NativeSample2TurboModuleSpec <RCTBridgeModule, RCTTurboModule>
- (void) voidFunc;
@end





@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
- (void) voidFunc;
@end


namespace facebook {
  namespace react {
    /**
    * ObjC++ class for module 'SampleTurboModule'
    */
    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
    /**
    * ObjC++ class for module 'Sample2TurboModule'
    */
    class JSI_EXPORT NativeSample2TurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSample2TurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook
",
}
`;
