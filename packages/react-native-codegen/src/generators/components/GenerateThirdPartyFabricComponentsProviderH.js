/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 * @format
 */

'use strict';

import type {SchemaType} from '../../CodegenSchema';

// File path -> contents
type FilesOutput = Map<string, string>;

const template = `
/*
 * ${'C'}opyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * ${'@'}generated by GenerateRCTThirdPartyFabricComponentsProviderH
 */

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wreturn-type-c-linkage"

#import <React/RCTComponentViewProtocol.h>

#ifdef __cplusplus
extern "C" {
#endif

Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name);

::_LOOKUP_FUNCS_::

#ifdef __cplusplus
}
#endif

#pragma GCC diagnostic pop

`;

const lookupFuncTemplate = `
Class<RCTComponentViewProtocol> ::_CLASSNAME_::Cls(void) __attribute__((used)); // ::_LIBRARY_NAME_::
`.trim();

module.exports = {
  generate(schemas: {[string]: SchemaType}): FilesOutput {
    const fileName = 'RCTThirdPartyFabricComponentsProvider.h';

    const lookupFuncs = Object.keys(schemas)
      .map(libraryName => {
        const schema = schemas[libraryName];
        return Object.keys(schema.modules)
          .map(moduleName => {
            const module = schema.modules[moduleName];
            if (module.type !== 'Component') {
              return;
            }

            const {components} = module;
            // No components in this module
            if (components == null) {
              return null;
            }

            return Object.keys(components)
              .filter(componentName => {
                const component = components[componentName];
                return !(
                  component.excludedPlatforms &&
                  component.excludedPlatforms.includes('iOS')
                );
              })
              .map(componentName => {
                const component = components[componentName];
                if (component.interfaceOnly === true) {
                  return;
                }

                return lookupFuncTemplate
                  .replace(/::_LIBRARY_NAME_::/g, libraryName)
                  .replace(/::_CLASSNAME_::/g, componentName);
              })
              .join('\n');
          })
          .filter(Boolean)
          .join('\n');
      })
      .join('\n');

    const replacedTemplate = template.replace(
      /::_LOOKUP_FUNCS_::/g,
      lookupFuncs,
    );

    return new Map([[fileName, replacedTemplate]]);
  },
};
