/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 * @format
 */

'use strict';

import type {
  NamedShape,
  SchemaType,
  StateTypeAnnotation,
} from '../../CodegenSchema';
const {capitalize} = require('../Utils.js');
const {getStateConstituents} = require('./ComponentsGeneratorUtils.js');

// File path -> contents
type FilesOutput = Map<string, string>;

const FileTemplate = ({
  libraryName,
  stateClasses,
}: {
  libraryName: string,
  stateClasses: string,
}) =>
  `
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * ${'@'}generated by codegen project: GenerateStateH.js
 */
#pragma once

#include <react/renderer/components/${libraryName}/Props.h>

#ifdef ANDROID
#include <folly/dynamic.h>
#include <react/renderer/mapbuffer/MapBuffer.h>
#include <react/renderer/mapbuffer/MapBufferBuilder.h>
#endif

namespace facebook {
namespace react {

${stateClasses}

} // namespace react
} // namespace facebook
`.trim();

const StateTemplate = ({
  stateName,
  ctorParams,
  ctorInits,
  getters,
  stateProps,
}: {
  stateName: string,
  ctorParams: string,
  ctorInits: string,
  getters: string,
  stateProps: string,
}) => {
  let stateWithParams = '';
  if (ctorParams.length > 0) {
    stateWithParams = `
      ${stateName}State(
        ${ctorParams}
      )
      : ${ctorInits}{};
    `;
  }

  return `
class ${stateName}State {
    public:
    ${stateWithParams}
    ${stateName}State() = default;

    ${getters}

#ifdef ANDROID
    ${stateName}State(${stateName}State const &previousState, folly::dynamic data){};
    folly::dynamic getDynamic() const {
      return {};
    };
    MapBuffer getMapBuffer() const {
      return MapBufferBuilder::EMPTY();
    };
#endif

    private:
    ${stateProps}
};
`.trim();
};

function sanitize(stringToSanitize: string, endString: string) {
  if (stringToSanitize.endsWith(endString)) {
    return stringToSanitize.slice(0, -1 * endString.length);
  }
  return stringToSanitize;
}

function generateStrings(
  componentName: string,
  state: $ReadOnlyArray<NamedShape<StateTypeAnnotation>>,
): {
  ctorParams: string,
  ctorInits: string,
  getters: string,
  stateProps: string,
} {
  let ctorParams = '';
  let ctorInits = '';
  let getters = '';
  let stateProps = '';

  state.forEach(stateShape => {
    const {name, varName, type, defaultValue} = getStateConstituents(
      componentName,
      stateShape,
    );

    ctorParams += `      ${type} ${name},\n`;
    ctorInits += `${varName}(${name}),\n      `;
    getters += `${type} get${capitalize(name)}() const;\n    `;
    let finalDefaultValue = defaultValue;
    if (defaultValue.length > 0) {
      finalDefaultValue = `{${defaultValue}}`;
    }
    stateProps += `  ${type} ${varName}${finalDefaultValue};\n    `;
  });

  // Sanitize
  ctorParams = sanitize(ctorParams.trim(), ',');
  ctorInits = sanitize(ctorInits.trim(), ',');

  return {
    ctorParams,
    ctorInits,
    getters,
    stateProps,
  };
}

module.exports = {
  generate(
    libraryName: string,
    schema: SchemaType,
    packageName?: string,
    assumeNonnull: boolean = false,
  ): FilesOutput {
    const fileName = 'States.h';

    const stateClasses = Object.keys(schema.modules)
      .map(moduleName => {
        const module = schema.modules[moduleName];
        if (module.type !== 'Component') {
          return;
        }

        const {components} = module;
        // No components in this module
        if (components == null) {
          return null;
        }
        return Object.keys(components)
          .map(componentName => {
            const component = components[componentName];
            if (component.interfaceOnly === true) {
              return null;
            }

            const state = component.state;
            if (!state) {
              return StateTemplate({
                stateName: componentName,
                ctorParams: '',
                ctorInits: '',
                getters: '',
                stateProps: '',
              });
            }

            const {ctorParams, ctorInits, getters, stateProps} =
              generateStrings(componentName, state);

            return StateTemplate({
              stateName: componentName,
              ctorParams,
              ctorInits,
              getters,
              stateProps,
            });
          })
          .filter(Boolean)
          .join('\n\n');
      })
      .filter(Boolean)
      .join('\n\n');

    const template = FileTemplate({libraryName, stateClasses});
    return new Map([[fileName, template]]);
  },
};
