// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GenerateModuleObjCpp can generate a header file NativeModule specs 1`] = `
"
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleHObjCpp.js
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

#import <vector>

#import <Foundation/Foundation.h>

#import <folly/Optional.h>

#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>

#import <ReactCommon/RCTTurboModule.h>



@protocol NativeArrayTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSArray<NSString *> *)getArray:(NSArray *)a;
- (NSArray<NSString *> *)getReadOnlyArray:(NSArray *)a;
- (NSArray<NSString *> *)getArrayWithAlias:(NSArray *)a
                                         b:(NSArray *)b;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'ArrayTurboModule'
     */
    class JSI_EXPORT NativeArrayTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeArrayTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



@protocol NativeBooleanTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSNumber *)getBoolean:(BOOL)arg;
- (NSNumber *)getBooleanWithAlias:(BOOL)arg;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'BooleanTurboModule'
     */
    class JSI_EXPORT NativeBooleanTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeBooleanTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



@protocol NativeCallbackTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithCallbackWithAlias:(RCTResponseSenderBlock)c;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'CallbackTurboModule'
     */
    class JSI_EXPORT NativeCallbackTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeCallbackTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



@protocol NativeNullableTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSNumber * _Nullable)getBool:(NSNumber *)a;
- (NSNumber * _Nullable)getNumber:(NSNumber *)a;
- (NSString * _Nullable)getString:(NSNumber *)a;
- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)a;
- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)a;
- (void)getValueWithPromise:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'NullableTurboModule'
     */
    class JSI_EXPORT NativeNullableTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeNullableTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



@protocol NativeNumberTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSNumber *)getNumber:(double)arg;
- (NSNumber *)getNumberWithAlias:(double)arg;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'NumberTurboModule'
     */
    class JSI_EXPORT NativeNumberTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeNumberTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



namespace JS {
  namespace NativeObjectTurboModule {
    struct SpecDifficultObjectAE {
      bool D() const;
      double E() const;
      NSString *F() const;

      SpecDifficultObjectAE(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectAE)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectAE:(id)json;
@end


namespace JS {
  namespace NativeObjectTurboModule {
    struct SpecDifficultObjectA {
      bool D() const;
      JS::NativeObjectTurboModule::SpecDifficultObjectAE E() const;
      NSString *F() const;

      SpecDifficultObjectA(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectA)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectA:(id)json;
@end


namespace JS {
  namespace NativeObjectTurboModule {
    struct ConstantsEEE {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<double> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEEE */
        Builder(ConstantsEEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

namespace JS {
  namespace NativeObjectTurboModule {
    struct ConstantsEE {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<JS::NativeObjectTurboModule::ConstantsEEE::Builder> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEE */
        Builder(ConstantsEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

namespace JS {
  namespace NativeObjectTurboModule {
    struct ConstantsE {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<JS::NativeObjectTurboModule::ConstantsEE::Builder> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsE */
        Builder(ConstantsE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

namespace JS {
  namespace NativeObjectTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<JS::NativeObjectTurboModule::ConstantsE::Builder> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeObjectTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSDictionary *)getGenericObject:(NSDictionary *)arg;
- (NSDictionary *)getGenericObjectReadOnly:(NSDictionary *)arg;
- (NSDictionary *)getGenericObjectWithAlias:(NSDictionary *)arg;
- (NSDictionary *)difficultObject:(JS::NativeObjectTurboModule::SpecDifficultObjectA &)A;
- (facebook::react::ModuleConstants<JS::NativeObjectTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeObjectTurboModule::Constants::Builder>)getConstants;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'ObjectTurboModule'
     */
    class JSI_EXPORT NativeObjectTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct ConstantsEEE {

      struct Builder {
        struct Input {
          folly::Optional<bool> D;
          folly::Optional<double> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEEE */
        Builder(ConstantsEEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct ConstantsEE {

      struct Builder {
        struct Input {
          folly::Optional<bool> D;
          folly::Optional<JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEE */
        Builder(ConstantsEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct ConstantsE {

      struct Builder {
        struct Input {
          folly::Optional<bool> D;
          folly::Optional<JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsE */
        Builder(ConstantsE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          folly::Optional<bool> D;
          id<NSObject> _Nullable  A;
          folly::Optional<JS::NativeOptionalObjectTurboModule::ConstantsE::Builder> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeOptionalObjectTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (facebook::react::ModuleConstants<JS::NativeOptionalObjectTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeOptionalObjectTurboModule::Constants::Builder>)getConstants;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'OptionalObjectTurboModule'
     */
    class JSI_EXPORT NativeOptionalObjectTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeOptionalObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



@protocol NativePromiseTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)getValueWithPromise:(BOOL)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)getValueWithPromiseWithAlias:(NSString *)arg
                             resolve:(RCTPromiseResolveBlock)resolve
                              reject:(RCTPromiseRejectBlock)reject;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'PromiseTurboModule'
     */
    class JSI_EXPORT NativePromiseTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativePromiseTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecGetObjectShapeArg {
      double prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetObjectShapeArg:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_Animal:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<bool> const1;
          RCTRequired<double> const2;
          RCTRequired<NSString *> const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber *)getBool:(BOOL)arg;
- (NSNumber *)getNumber:(double)arg;
- (NSString *)getString:(NSString *)arg;
- (NSArray<id<NSObject>> *)getArray:(NSArray *)arg;
- (NSDictionary *)getObject:(NSDictionary *)arg;
- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModule::SpecGetObjectShapeArg &)arg;
- (NSDictionary *)getAlias:(JS::NativeSampleTurboModule::Animal &)arg;
- (NSNumber *)getRootTag:(double)arg;
- (NSDictionary *)getValue:(double)x
getValuegetValuegetValuegetValuegetValuey:(NSString *)getValuegetValuegetValuegetValuegetValuey
                         z:(NSDictionary *)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(BOOL)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)getConstants;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'SampleTurboModule'
     */
    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



namespace JS {
  namespace NativeSampleTurboModuleArrays {
    struct ConstantsIdElement {

      struct Builder {
        struct Input {
          RCTRequired<double> prop;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsIdElement */
        Builder(ConstantsIdElement i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsIdElement fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsIdElement(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}

namespace JS {
  namespace NativeSampleTurboModuleArrays {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<std::vector<bool>> const1;
          RCTRequired<std::vector<double>> const2;
          RCTRequired<std::vector<NSString *>> const3;
          folly::Optional<std::vector<folly::Optional<JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder>>> id_;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleArraysSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSArray<NSNumber *> *)getBool:(NSArray *)id;
- (NSArray<NSNumber *> *)getNumber:(NSArray *)arg;
- (NSArray<NSString *> *)getString:(NSArray *)arg;
- (NSArray<NSArray<id<NSObject>> *> *)getArray:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getObject:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getObjectShape:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getAlias:(NSArray *)arg;
- (NSArray<NSNumber *> *)getRootTag:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getValue:(NSArray *)x
                                    y:(NSArray *)y
                                    z:(NSArray *)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSArray *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleArrays::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleArrays::Constants::Builder>)getConstants;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'SampleTurboModuleArrays'
     */
    class JSI_EXPORT NativeSampleTurboModuleArraysSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleArraysSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



namespace JS {
  namespace NativeSampleTurboModuleNullable {
    struct SpecGetObjectShapeArg {
      folly::Optional<double> prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullable_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_SpecGetObjectShapeArg:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModuleNullable {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullable_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_Animal:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModuleNullable {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<folly::Optional<bool>> const1;
          RCTRequired<folly::Optional<double>> const2;
          RCTRequired<NSString *> const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleNullableSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber * _Nullable)getBool:(NSNumber *)arg;
- (NSNumber * _Nullable)getNumber:(NSNumber *)arg;
- (NSString * _Nullable)getString:(NSString * _Nullable)arg;
- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)arg;
- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)arg;
- (NSDictionary * _Nullable)getObjectShape:(JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg &)arg;
- (NSDictionary * _Nullable)getAlias:(JS::NativeSampleTurboModuleNullable::Animal &)arg;
- (NSNumber * _Nullable)getRootTag:(NSNumber *)arg;
- (NSDictionary * _Nullable)getValue:(NSNumber *)x
                                   y:(NSString * _Nullable)y
                                   z:(NSDictionary * _Nullable)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSNumber *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullable::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullable::Constants::Builder>)getConstants;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'SampleTurboModuleNullable'
     */
    class JSI_EXPORT NativeSampleTurboModuleNullableSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleNullableSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



namespace JS {
  namespace NativeSampleTurboModuleNullableAndOptional {
    struct SpecGetObjectShapeArg {
      folly::Optional<double> prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModuleNullableAndOptional {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_Animal:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModuleNullableAndOptional {
    struct Constants {

      struct Builder {
        struct Input {
          folly::Optional<bool> const1;
          folly::Optional<double> const2;
          NSString *const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleNullableAndOptionalSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber * _Nullable)getBool:(NSNumber *)arg;
- (NSNumber * _Nullable)getNumber:(NSNumber *)arg;
- (NSString * _Nullable)getString:(NSString * _Nullable)arg;
- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)arg;
- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)arg;
- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg &)arg;
- (NSDictionary * _Nullable)getAlias:(JS::NativeSampleTurboModuleNullableAndOptional::Animal &)arg;
- (NSNumber * _Nullable)getRootTag:(NSNumber *)arg;
- (NSDictionary * _Nullable)getValue:(NSNumber *)x
                                   y:(NSString * _Nullable)y
                                   z:(NSDictionary * _Nullable)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSNumber *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder>)getConstants;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'SampleTurboModuleNullableAndOptional'
     */
    class JSI_EXPORT NativeSampleTurboModuleNullableAndOptionalSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleNullableAndOptionalSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



namespace JS {
  namespace NativeSampleTurboModuleOptional {
    struct SpecGetObjectShapeArg {
      folly::Optional<double> prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleOptional_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_SpecGetObjectShapeArg:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModuleOptional {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleOptional_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_Animal:(id)json;
@end


namespace JS {
  namespace NativeSampleTurboModuleOptional {
    struct Constants {

      struct Builder {
        struct Input {
          folly::Optional<bool> const1;
          folly::Optional<double> const2;
          NSString *const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleOptionalSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber *)getBool:(NSNumber *)arg;
- (NSNumber *)getNumber:(NSNumber *)arg;
- (NSString *)getString:(NSString *)arg;
- (NSArray<id<NSObject>> *)getArray:(NSArray *)arg;
- (NSDictionary *)getObject:(NSDictionary *)arg;
- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg &)arg;
- (NSDictionary *)getAlias:(JS::NativeSampleTurboModuleOptional::Animal &)arg;
- (NSNumber *)getRootTag:(NSNumber *)arg;
- (NSDictionary *)getValue:(NSNumber *)x
                         y:(NSString *)y
                         z:(NSDictionary *)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSNumber *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleOptional::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleOptional::Constants::Builder>)getConstants;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'SampleTurboModuleOptional'
     */
    class JSI_EXPORT NativeSampleTurboModuleOptionalSpecJSI : public ObjCTurboModule {
    public:
      NativeSampleTurboModuleOptionalSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook



@protocol NativeStringTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSString *)getString:(NSString *)arg;
- (NSString *)getStringWithAlias:(NSString *)arg;

@end
namespace facebook {
  namespace react {
    /**
     * ObjC++ class for module 'StringTurboModule'
     */
    class JSI_EXPORT NativeStringTurboModuleSpecJSI : public ObjCTurboModule {
    public:
      NativeStringTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
    };
  } // namespace react
} // namespace facebook








inline bool JS::NativeObjectTurboModule::SpecDifficultObjectAE::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}


inline double JS::NativeObjectTurboModule::SpecDifficultObjectAE::E() const
{
  id const p = _v[@\\"E\\"];
  return RCTBridgingToDouble(p);
}


inline NSString *JS::NativeObjectTurboModule::SpecDifficultObjectAE::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}


inline bool JS::NativeObjectTurboModule::SpecDifficultObjectA::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}


inline JS::NativeObjectTurboModule::SpecDifficultObjectAE JS::NativeObjectTurboModule::SpecDifficultObjectA::E() const
{
  id const p = _v[@\\"E\\"];
  return JS::NativeObjectTurboModule::SpecDifficultObjectAE(p);
}


inline NSString *JS::NativeObjectTurboModule::SpecDifficultObjectA::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}


inline JS::NativeObjectTurboModule::ConstantsEEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = @(E);
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::ConstantsEEE::Builder::Builder(ConstantsEEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline JS::NativeObjectTurboModule::ConstantsEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = E.buildUnsafeRawValue();
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::ConstantsEE::Builder::Builder(ConstantsEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline JS::NativeObjectTurboModule::ConstantsE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = E.buildUnsafeRawValue();
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::ConstantsE::Builder::Builder(ConstantsE i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline JS::NativeObjectTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = E.buildUnsafeRawValue();
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
  auto E = i.E;
  d[@\\"E\\"] = E.hasValue() ? @((double)E.value()) : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder::Builder(ConstantsEEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
  auto E = i.E;
  d[@\\"E\\"] = E.hasValue() ? E.value().buildUnsafeRawValue() : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder::Builder(ConstantsEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline JS::NativeOptionalObjectTurboModule::ConstantsE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
  auto E = i.E;
  d[@\\"E\\"] = E.hasValue() ? E.value().buildUnsafeRawValue() : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsE::Builder::Builder(ConstantsE i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline JS::NativeOptionalObjectTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
  auto A = i.A;
  d[@\\"A\\"] = A;
  auto E = i.E;
  d[@\\"E\\"] = E.hasValue() ? E.value().buildUnsafeRawValue() : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}


inline double JS::NativeSampleTurboModule::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToDouble(p);
}


inline NSString *JS::NativeSampleTurboModule::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToString(p);
}


inline JS::NativeSampleTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = @(const1);
  auto const2 = i.const2.get();
  d[@\\"const2\\"] = @(const2);
  auto const3 = i.const3.get();
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto prop = i.prop.get();
  d[@\\"prop\\"] = @(prop);
  return d;
}) {}
inline JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder::Builder(ConstantsIdElement i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline JS::NativeSampleTurboModuleArrays::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = RCTConvertVecToArray(const1, ^id(bool el_) { return @(el_); });
  auto const2 = i.const2.get();
  d[@\\"const2\\"] = RCTConvertVecToArray(const2, ^id(double el_) { return @(el_); });
  auto const3 = i.const3.get();
  d[@\\"const3\\"] = RCTConvertVecToArray(const3, ^id(NSString * el_) { return el_; });
  auto id_ = i.id_;
  d[@\\"id_\\"] = RCTConvertOptionalVecToArray(id_, ^id(folly::Optional<JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder> el_) { return el_.hasValue() ? el_.value().buildUnsafeRawValue() : nil; });
  return d;
}) {}
inline JS::NativeSampleTurboModuleArrays::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline folly::Optional<double> JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToOptionalDouble(p);
}


inline NSString *JS::NativeSampleTurboModuleNullable::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToOptionalString(p);
}


inline JS::NativeSampleTurboModuleNullable::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = const1.hasValue() ? @((BOOL)const1.value()) : nil;
  auto const2 = i.const2.get();
  d[@\\"const2\\"] = const2.hasValue() ? @((double)const2.value()) : nil;
  auto const3 = i.const3.get();
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModuleNullable::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline folly::Optional<double> JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToOptionalDouble(p);
}


inline NSString *JS::NativeSampleTurboModuleNullableAndOptional::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToOptionalString(p);
}


inline JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1;
  d[@\\"const1\\"] = const1.hasValue() ? @((BOOL)const1.value()) : nil;
  auto const2 = i.const2;
  d[@\\"const2\\"] = const2.hasValue() ? @((double)const2.value()) : nil;
  auto const3 = i.const3;
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}

inline folly::Optional<double> JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToOptionalDouble(p);
}


inline NSString *JS::NativeSampleTurboModuleOptional::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToOptionalString(p);
}


inline JS::NativeSampleTurboModuleOptional::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1;
  d[@\\"const1\\"] = const1.hasValue() ? @((BOOL)const1.value()) : nil;
  auto const2 = i.const2;
  d[@\\"const2\\"] = const2.hasValue() ? @((double)const2.value()) : nil;
  auto const3 = i.const3;
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModuleOptional::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}

"
`;

exports[`GenerateModuleObjCpp can generate an implementation file NativeModule specs 1`] = `
"
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by an internal genrule from Flow types.
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import \\"RNCodegenModuleFixtures.h\\"



namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeArrayTurboModuleSpecJSI::getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeArrayTurboModuleSpecJSI::getReadOnlyArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getReadOnlyArray\\", @selector(getReadOnlyArray:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeArrayTurboModuleSpecJSI::getArrayWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArrayWithAlias\\", @selector(getArrayWithAlias:b:), args, count);
    }


    NativeArrayTurboModuleSpecJSI::NativeArrayTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeArrayTurboModuleSpecJSI_getArray};
        

        
        methodMap_[\\"getReadOnlyArray\\"] = MethodMetadata {1, __hostFunction_NativeArrayTurboModuleSpecJSI_getReadOnlyArray};
        

        
        methodMap_[\\"getArrayWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeArrayTurboModuleSpecJSI_getArrayWithAlias};
        

        }
    }
  } // namespace react
} // namespace facebook



namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeBooleanTurboModuleSpecJSI::getBoolean(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getBoolean\\", @selector(getBoolean:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeBooleanTurboModuleSpecJSI::getBooleanWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getBooleanWithAlias\\", @selector(getBooleanWithAlias:), args, count);
    }


    NativeBooleanTurboModuleSpecJSI::NativeBooleanTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"getBoolean\\"] = MethodMetadata {1, __hostFunction_NativeBooleanTurboModuleSpecJSI_getBoolean};
        

        
        methodMap_[\\"getBooleanWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeBooleanTurboModuleSpecJSI_getBooleanWithAlias};
        

        }
    }
  } // namespace react
} // namespace facebook



namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeCallbackTurboModuleSpecJSI::getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeCallbackTurboModuleSpecJSI::getValueWithCallbackWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallbackWithAlias\\", @selector(getValueWithCallbackWithAlias:), args, count);
    }


    NativeCallbackTurboModuleSpecJSI::NativeCallbackTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeCallbackTurboModuleSpecJSI_getValueWithCallback};
        

        
        methodMap_[\\"getValueWithCallbackWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeCallbackTurboModuleSpecJSI_getValueWithCallbackWithAlias};
        

        }
    }
  } // namespace react
} // namespace facebook



namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI::getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getBool\\", @selector(getBool:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI::getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI::getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI::getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI::getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI::getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:reject:), args, count);
    }


    NativeNullableTurboModuleSpecJSI::NativeNullableTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getBool};
        

        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getNumber};
        

        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getString};
        

        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getArray};
        

        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getObject};
        

        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getValueWithPromise};
        

        }
    }
  } // namespace react
} // namespace facebook



namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeNumberTurboModuleSpecJSI::getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeNumberTurboModuleSpecJSI::getNumberWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumberWithAlias\\", @selector(getNumberWithAlias:), args, count);
    }


    NativeNumberTurboModuleSpecJSI::NativeNumberTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeNumberTurboModuleSpecJSI_getNumber};
        

        
        methodMap_[\\"getNumberWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeNumberTurboModuleSpecJSI_getNumberWithAlias};
        

        }
    }
  } // namespace react
} // namespace facebook



@implementation RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectAE)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectAE:(id)json
{
  return facebook::react::managedPointer<JS::NativeObjectTurboModule::SpecDifficultObjectAE>(json);
}
@end


@implementation RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectA)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectA:(id)json
{
  return facebook::react::managedPointer<JS::NativeObjectTurboModule::SpecDifficultObjectA>(json);
}
@end


@implementation RCTCxxConvert (NativeObjectTurboModule_ConstantsEEE)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_ConstantsEEE:(id)json
{
  return facebook::react::managedPointer<JS::NativeObjectTurboModule::ConstantsEEE>(json);
}
@end


@implementation RCTCxxConvert (NativeObjectTurboModule_ConstantsEE)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_ConstantsEE:(id)json
{
  return facebook::react::managedPointer<JS::NativeObjectTurboModule::ConstantsEE>(json);
}
@end


@implementation RCTCxxConvert (NativeObjectTurboModule_ConstantsE)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_ConstantsE:(id)json
{
  return facebook::react::managedPointer<JS::NativeObjectTurboModule::ConstantsE>(json);
}
@end


@implementation RCTCxxConvert (NativeObjectTurboModule_Constants)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_Constants:(id)json
{
  return facebook::react::managedPointer<JS::NativeObjectTurboModule::Constants>(json);
}
@end

namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI::getGenericObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getGenericObject\\", @selector(getGenericObject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI::getGenericObjectReadOnly(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getGenericObjectReadOnly\\", @selector(getGenericObjectReadOnly:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI::getGenericObjectWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getGenericObjectWithAlias\\", @selector(getGenericObjectWithAlias:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI::difficultObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"difficultObject\\", @selector(difficultObject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    NativeObjectTurboModuleSpecJSI::NativeObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"getGenericObject\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObject};
        

        
        methodMap_[\\"getGenericObjectReadOnly\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObjectReadOnly};
        

        
        methodMap_[\\"getGenericObjectWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObjectWithAlias};
        

        
        methodMap_[\\"difficultObject\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_difficultObject};
        setMethodArgConversionSelector(@\\"difficultObject\\", 0, @\\"JS_NativeObjectTurboModule_SpecDifficultObjectA:\\");

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_getConstants};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_getConstants};
        

        }
    }
  } // namespace react
} // namespace facebook



@implementation RCTCxxConvert (NativeOptionalObjectTurboModule_ConstantsEEE)
+ (RCTManagedPointer *)JS_NativeOptionalObjectTurboModule_ConstantsEEE:(id)json
{
  return facebook::react::managedPointer<JS::NativeOptionalObjectTurboModule::ConstantsEEE>(json);
}
@end


@implementation RCTCxxConvert (NativeOptionalObjectTurboModule_ConstantsEE)
+ (RCTManagedPointer *)JS_NativeOptionalObjectTurboModule_ConstantsEE:(id)json
{
  return facebook::react::managedPointer<JS::NativeOptionalObjectTurboModule::ConstantsEE>(json);
}
@end


@implementation RCTCxxConvert (NativeOptionalObjectTurboModule_ConstantsE)
+ (RCTManagedPointer *)JS_NativeOptionalObjectTurboModule_ConstantsE:(id)json
{
  return facebook::react::managedPointer<JS::NativeOptionalObjectTurboModule::ConstantsE>(json);
}
@end


@implementation RCTCxxConvert (NativeOptionalObjectTurboModule_Constants)
+ (RCTManagedPointer *)JS_NativeOptionalObjectTurboModule_Constants:(id)json
{
  return facebook::react::managedPointer<JS::NativeOptionalObjectTurboModule::Constants>(json);
}
@end

namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeOptionalObjectTurboModuleSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeOptionalObjectTurboModuleSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    NativeOptionalObjectTurboModuleSpecJSI::NativeOptionalObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeOptionalObjectTurboModuleSpecJSI_getConstants};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeOptionalObjectTurboModuleSpecJSI_getConstants};
        

        }
    }
  } // namespace react
} // namespace facebook



namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativePromiseTurboModuleSpecJSI::getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativePromiseTurboModuleSpecJSI::getValueWithPromiseWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromiseWithAlias\\", @selector(getValueWithPromiseWithAlias:resolve:reject:), args, count);
    }


    NativePromiseTurboModuleSpecJSI::NativePromiseTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativePromiseTurboModuleSpecJSI_getValueWithPromise};
        

        
        methodMap_[\\"getValueWithPromiseWithAlias\\"] = MethodMetadata {1, __hostFunction_NativePromiseTurboModuleSpecJSI_getValueWithPromiseWithAlias};
        

        }
    }
  } // namespace react
} // namespace facebook



@implementation RCTCxxConvert (NativeSampleTurboModule_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetObjectShapeArg:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModule::SpecGetObjectShapeArg>(json);
}
@end


@implementation RCTCxxConvert (NativeSampleTurboModule_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_Animal:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModule::Animal>(json);
}
@end


@implementation RCTCxxConvert (NativeSampleTurboModule_Constants)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_Constants:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModule::Constants>(json);
}
@end

namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getBool\\", @selector(getBool:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:getValuegetValuegetValuegetValuegetValuey:z:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    NativeSampleTurboModuleSpecJSI::NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"voidFunc\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc};
        

        
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getBool};
        

        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getNumber};
        

        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getString};
        

        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getArray};
        

        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getObject};
        

        
        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getObjectShape};
        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModule_SpecGetObjectShapeArg:\\");

        
        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getAlias};
        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModule_SpecGetAliasArg:\\");

        
        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getRootTag};
        

        
        methodMap_[\\"getValue\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getValue};
        

        
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithCallback};
        

        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithPromise};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getConstants};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getConstants};
        

        }
    }
  } // namespace react
} // namespace facebook



@implementation RCTCxxConvert (NativeSampleTurboModuleArrays_ConstantsIdElement)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleArrays_ConstantsIdElement:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleArrays::ConstantsIdElement>(json);
}
@end


@implementation RCTCxxConvert (NativeSampleTurboModuleArrays_Constants)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleArrays_Constants:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleArrays::Constants>(json);
}
@end

namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getBool\\", @selector(getBool:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getString\\", @selector(getString:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getObject\\", @selector(getObject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getAlias\\", @selector(getAlias:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    NativeSampleTurboModuleArraysSpecJSI::NativeSampleTurboModuleArraysSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"voidFunc\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_voidFunc};
        

        
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getBool};
        

        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getNumber};
        

        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getString};
        

        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getArray};
        

        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getObject};
        

        
        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getObjectShape};
        

        
        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getAlias};
        

        
        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getRootTag};
        

        
        methodMap_[\\"getValue\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValue};
        

        
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValueWithCallback};
        

        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValueWithPromise};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getConstants};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getConstants};
        

        }
    }
  } // namespace react
} // namespace facebook



@implementation RCTCxxConvert (NativeSampleTurboModuleNullable_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_SpecGetObjectShapeArg:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg>(json);
}
@end


@implementation RCTCxxConvert (NativeSampleTurboModuleNullable_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_Animal:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullable::Animal>(json);
}
@end


@implementation RCTCxxConvert (NativeSampleTurboModuleNullable_Constants)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_Constants:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullable::Constants>(json);
}
@end

namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getBool\\", @selector(getBool:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    NativeSampleTurboModuleNullableSpecJSI::NativeSampleTurboModuleNullableSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"voidFunc\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_voidFunc};
        

        
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getBool};
        

        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getNumber};
        

        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getString};
        

        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getArray};
        

        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getObject};
        

        
        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getObjectShape};
        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModuleNullable_SpecGetObjectShapeArg:\\");

        
        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getAlias};
        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModuleNullable_SpecGetAliasArg:\\");

        
        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getRootTag};
        

        
        methodMap_[\\"getValue\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValue};
        

        
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValueWithCallback};
        

        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValueWithPromise};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getConstants};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getConstants};
        

        }
    }
  } // namespace react
} // namespace facebook



@implementation RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg>(json);
}
@end


@implementation RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_Animal:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullableAndOptional::Animal>(json);
}
@end


@implementation RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_Constants)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_Constants:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullableAndOptional::Constants>(json);
}
@end

namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getBool\\", @selector(getBool:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    NativeSampleTurboModuleNullableAndOptionalSpecJSI::NativeSampleTurboModuleNullableAndOptionalSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"voidFunc\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_voidFunc};
        

        
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getBool};
        

        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getNumber};
        

        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getString};
        

        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getArray};
        

        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getObject};
        

        
        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getObjectShape};
        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg:\\");

        
        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getAlias};
        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModuleNullableAndOptional_SpecGetAliasArg:\\");

        
        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getRootTag};
        

        
        methodMap_[\\"getValue\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValue};
        

        
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValueWithCallback};
        

        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValueWithPromise};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getConstants};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getConstants};
        

        }
    }
  } // namespace react
} // namespace facebook



@implementation RCTCxxConvert (NativeSampleTurboModuleOptional_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_SpecGetObjectShapeArg:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg>(json);
}
@end


@implementation RCTCxxConvert (NativeSampleTurboModuleOptional_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_Animal:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleOptional::Animal>(json);
}
@end


@implementation RCTCxxConvert (NativeSampleTurboModuleOptional_Constants)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_Constants:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleOptional::Constants>(json);
}
@end

namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getBool\\", @selector(getBool:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI::getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", getConstants, args, count);
    }


    NativeSampleTurboModuleOptionalSpecJSI::NativeSampleTurboModuleOptionalSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"voidFunc\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_voidFunc};
        

        
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getBool};
        

        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getNumber};
        

        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getString};
        

        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getArray};
        

        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getObject};
        

        
        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getObjectShape};
        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModuleOptional_SpecGetObjectShapeArg:\\");

        
        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getAlias};
        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModuleOptional_SpecGetAliasArg:\\");

        
        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getRootTag};
        

        
        methodMap_[\\"getValue\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValue};
        

        
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValueWithCallback};
        

        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValueWithPromise};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getConstants};
        

        
        methodMap_[\\"getConstants\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getConstants};
        

        }
    }
  } // namespace react
} // namespace facebook



namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativeStringTurboModuleSpecJSI::getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }


    static facebook::jsi::Value __hostFunction_NativeStringTurboModuleSpecJSI::getStringWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getStringWithAlias\\", @selector(getStringWithAlias:), args, count);
    }


    NativeStringTurboModuleSpecJSI::NativeStringTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeStringTurboModuleSpecJSI_getString};
        

        
        methodMap_[\\"getStringWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeStringTurboModuleSpecJSI_getStringWithAlias};
        

        }
    }
  } // namespace react
} // namespace facebook

"
`;
