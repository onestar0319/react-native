// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GeneratePropsH can generate for 'ArrayPropsNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <cinttypes>
#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/Color.h>
#include <react/renderer/graphics/Geometry.h>
#include <react/renderer/imagemanager/primitives.h>
#include <vector>

namespace facebook {
namespace react {

using ArrayPropsNativeComponentViewSizesMask = uint32_t;

enum class ArrayPropsNativeComponentViewSizes: ArrayPropsNativeComponentViewSizesMask {
  Small = 1 << 0,
  Large = 1 << 1
};

constexpr bool operator&(
  ArrayPropsNativeComponentViewSizesMask const lhs,
  enum ArrayPropsNativeComponentViewSizes const rhs) {
  return lhs & static_cast<ArrayPropsNativeComponentViewSizesMask>(rhs);
}

constexpr ArrayPropsNativeComponentViewSizesMask operator|(
  ArrayPropsNativeComponentViewSizesMask const lhs,
  enum ArrayPropsNativeComponentViewSizes const rhs) {
  return lhs | static_cast<ArrayPropsNativeComponentViewSizesMask>(rhs);
}

constexpr void operator|=(
  ArrayPropsNativeComponentViewSizesMask &lhs,
  enum ArrayPropsNativeComponentViewSizes const rhs) {
  lhs = lhs | static_cast<ArrayPropsNativeComponentViewSizesMask>(rhs);
}

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentViewSizesMask &result) {
  auto items = std::vector<std::string>{value};
  for (const auto &item : items) {
    if (item == \\"small\\") {
      result |= ArrayPropsNativeComponentViewSizes::Small;
      continue;
    }
    if (item == \\"large\\") {
      result |= ArrayPropsNativeComponentViewSizes::Large;
      continue;
    }
    abort();
  }
}

static inline std::string toString(const ArrayPropsNativeComponentViewSizesMask &value) {
    auto result = std::string{};
    auto separator = std::string{\\", \\"};

    if (value & ArrayPropsNativeComponentViewSizes::Small) {
      result += \\"small\\" + separator;
    }
    if (value & ArrayPropsNativeComponentViewSizes::Large) {
      result += \\"large\\" + separator;
    }
    if (!result.empty()) {
      result.erase(result.length() - separator.length());
    }
    return result;
}
struct ArrayPropsNativeComponentViewObjectStruct {
  std::string prop;
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentViewObjectStruct &result) {
  auto map = (butter::map<std::string, RawValue>)value;

  auto tmp_prop = map.find(\\"prop\\");
  if (tmp_prop != map.end()) {
    fromRawValue(context, tmp_prop->second, result.prop);
  }
}

static inline std::string toString(const ArrayPropsNativeComponentViewObjectStruct &value) {
  return \\"[Object ArrayPropsNativeComponentViewObjectStruct]\\";
}

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<ArrayPropsNativeComponentViewObjectStruct> &result) {
  auto items = (std::vector<RawValue>)value;
  for (const auto &item : items) {
    ArrayPropsNativeComponentViewObjectStruct newItem;
    fromRawValue(context, item, newItem);
    result.emplace_back(newItem);
  }
}

class ArrayPropsNativeComponentViewProps final : public ViewProps {
 public:
  ArrayPropsNativeComponentViewProps() = default;
  ArrayPropsNativeComponentViewProps(const PropsParserContext& context, const ArrayPropsNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::vector<std::string> names{};
  std::vector<bool> disableds{};
  std::vector<int> progress{};
  std::vector<Float> radii{};
  std::vector<SharedColor> colors{};
  std::vector<ImageSource> srcs{};
  std::vector<Point> points{};
  ArrayPropsNativeComponentViewSizesMask sizes{static_cast<ArrayPropsNativeComponentViewSizesMask>(ArrayPropsNativeComponentViewSizes::Small)};
  std::vector<ArrayPropsNativeComponentViewObjectStruct> object{};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'BooleanPropNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook {
namespace react {

class BooleanPropNativeComponentViewProps final : public ViewProps {
 public:
  BooleanPropNativeComponentViewProps() = default;
  BooleanPropNativeComponentViewProps(const PropsParserContext& context, const BooleanPropNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool disabled{false};
  bool disabledNullable{};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'ColorPropNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/Color.h>

namespace facebook {
namespace react {

class ColorPropNativeComponentViewProps final : public ViewProps {
 public:
  ColorPropNativeComponentViewProps() = default;
  ColorPropNativeComponentViewProps(const PropsParserContext& context, const ColorPropNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  SharedColor tintColor{};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'EdgeInsetsPropNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook {
namespace react {

class EdgeInsetsPropNativeComponentViewProps final : public ViewProps {
 public:
  EdgeInsetsPropNativeComponentViewProps() = default;
  EdgeInsetsPropNativeComponentViewProps(const PropsParserContext& context, const EdgeInsetsPropNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'EnumPropNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook {
namespace react {

enum class EnumPropNativeComponentViewAlignment { Top, Center, BottomRight };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, EnumPropNativeComponentViewAlignment &result) {
  auto string = (std::string)value;
  if (string == \\"top\\") { result = EnumPropNativeComponentViewAlignment::Top; return; }
  if (string == \\"center\\") { result = EnumPropNativeComponentViewAlignment::Center; return; }
  if (string == \\"bottom-right\\") { result = EnumPropNativeComponentViewAlignment::BottomRight; return; }
  abort();
}

static inline std::string toString(const EnumPropNativeComponentViewAlignment &value) {
  switch (value) {
    case EnumPropNativeComponentViewAlignment::Top: return \\"top\\";
    case EnumPropNativeComponentViewAlignment::Center: return \\"center\\";
    case EnumPropNativeComponentViewAlignment::BottomRight: return \\"bottom-right\\";
  }
}
enum class EnumPropNativeComponentViewIntervals { Intervals0 = 0, Intervals15 = 15, Intervals30 = 30, Intervals60 = 60 };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, EnumPropNativeComponentViewIntervals &result) {
  assert(value.hasType<int>());
  auto integerValue = (int)value;
  switch (integerValue) {
    case 0:
      result = EnumPropNativeComponentViewIntervals::Intervals0;
      return;
    case 15:
      result = EnumPropNativeComponentViewIntervals::Intervals15;
      return;
    case 30:
      result = EnumPropNativeComponentViewIntervals::Intervals30;
      return;
    case 60:
      result = EnumPropNativeComponentViewIntervals::Intervals60;
      return;
  }
  abort();
}

static inline std::string toString(const EnumPropNativeComponentViewIntervals &value) {
  switch (value) {
    case EnumPropNativeComponentViewIntervals::Intervals0: return \\"0\\";
    case EnumPropNativeComponentViewIntervals::Intervals15: return \\"15\\";
    case EnumPropNativeComponentViewIntervals::Intervals30: return \\"30\\";
    case EnumPropNativeComponentViewIntervals::Intervals60: return \\"60\\";
  }
}

class EnumPropNativeComponentViewProps final : public ViewProps {
 public:
  EnumPropNativeComponentViewProps() = default;
  EnumPropNativeComponentViewProps(const PropsParserContext& context, const EnumPropNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  EnumPropNativeComponentViewAlignment alignment{EnumPropNativeComponentViewAlignment::Center};
  EnumPropNativeComponentViewIntervals intervals{EnumPropNativeComponentViewIntervals::Intervals0};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'EventNestedObjectPropsNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook {
namespace react {

class EventNestedObjectPropsNativeComponentViewProps final : public ViewProps {
 public:
  EventNestedObjectPropsNativeComponentViewProps() = default;
  EventNestedObjectPropsNativeComponentViewProps(const PropsParserContext& context, const EventNestedObjectPropsNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool disabled{false};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'EventPropsNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook {
namespace react {

class EventPropsNativeComponentViewProps final : public ViewProps {
 public:
  EventPropsNativeComponentViewProps() = default;
  EventPropsNativeComponentViewProps(const PropsParserContext& context, const EventPropsNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool disabled{false};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'FloatPropsNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook {
namespace react {

class FloatPropsNativeComponentViewProps final : public ViewProps {
 public:
  FloatPropsNativeComponentViewProps() = default;
  FloatPropsNativeComponentViewProps(const PropsParserContext& context, const FloatPropsNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  Float blurRadius{0.0};
  Float blurRadius2{0.001};
  Float blurRadius3{2.1};
  Float blurRadius4{0.0};
  Float blurRadius5{1.0};
  Float blurRadius6{0.0};
  Float blurRadiusNullable{};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'ImagePropNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/imagemanager/primitives.h>

namespace facebook {
namespace react {

class ImagePropNativeComponentViewProps final : public ViewProps {
 public:
  ImagePropNativeComponentViewProps() = default;
  ImagePropNativeComponentViewProps(const PropsParserContext& context, const ImagePropNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  ImageSource thumbImage{};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'IntegerPropNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook {
namespace react {

class IntegerPropNativeComponentViewProps final : public ViewProps {
 public:
  IntegerPropNativeComponentViewProps() = default;
  IntegerPropNativeComponentViewProps(const PropsParserContext& context, const IntegerPropNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  int progress1{0};
  int progress2{-1};
  int progress3{10};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'InterfaceOnlyNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook {
namespace react {

class InterfaceOnlyNativeComponentViewProps final : public ViewProps {
 public:
  InterfaceOnlyNativeComponentViewProps() = default;
  InterfaceOnlyNativeComponentViewProps(const PropsParserContext& context, const InterfaceOnlyNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string title{\\"\\"};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'MultiNativePropNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/Color.h>
#include <react/renderer/graphics/Geometry.h>
#include <react/renderer/imagemanager/primitives.h>

namespace facebook {
namespace react {

class MultiNativePropNativeComponentViewProps final : public ViewProps {
 public:
  MultiNativePropNativeComponentViewProps() = default;
  MultiNativePropNativeComponentViewProps(const PropsParserContext& context, const MultiNativePropNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  ImageSource thumbImage{};
  SharedColor color{};
  SharedColor thumbTintColor{};
  Point point{};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'NoPropsNoEventsNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook {
namespace react {

class NoPropsNoEventsNativeComponentViewProps final : public ViewProps {
 public:
  NoPropsNoEventsNativeComponentViewProps() = default;
  NoPropsNoEventsNativeComponentViewProps(const PropsParserContext& context, const NoPropsNoEventsNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'ObjectPropsNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/image/conversions.h>
#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>
#include <react/renderer/graphics/Color.h>
#include <react/renderer/graphics/Geometry.h>
#include <react/renderer/imagemanager/primitives.h>
#include <vector>

namespace facebook {
namespace react {

enum class ObjectPropsNativeComponentStringEnumProp { Small, Large };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsNativeComponentStringEnumProp &result) {
  auto string = (std::string)value;
  if (string == \\"small\\") { result = ObjectPropsNativeComponentStringEnumProp::Small; return; }
  if (string == \\"large\\") { result = ObjectPropsNativeComponentStringEnumProp::Large; return; }
  abort();
}

static inline std::string toString(const ObjectPropsNativeComponentStringEnumProp &value) {
  switch (value) {
    case ObjectPropsNativeComponentStringEnumProp::Small: return \\"small\\";
    case ObjectPropsNativeComponentStringEnumProp::Large: return \\"large\\";
  }
}
enum class ObjectPropsNativeComponentIntEnumProp { IntEnumProp0 = 0, IntEnumProp1 = 1 };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsNativeComponentIntEnumProp &result) {
  assert(value.hasType<int>());
  auto integerValue = (int)value;
  switch (integerValue) {
    case 0:
      result = ObjectPropsNativeComponentIntEnumProp::IntEnumProp0;
      return;
    case 1:
      result = ObjectPropsNativeComponentIntEnumProp::IntEnumProp1;
      return;
  }
  abort();
}

static inline std::string toString(const ObjectPropsNativeComponentIntEnumProp &value) {
  switch (value) {
    case ObjectPropsNativeComponentIntEnumProp::IntEnumProp0: return \\"0\\";
    case ObjectPropsNativeComponentIntEnumProp::IntEnumProp1: return \\"1\\";
  }
}
struct ObjectPropsNativeComponentObjectPropStruct {
  std::string stringProp;
  bool booleanProp;
  Float floatProp;
  int intProp;
  ObjectPropsNativeComponentStringEnumProp stringEnumProp;
  ObjectPropsNativeComponentIntEnumProp intEnumProp;
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsNativeComponentObjectPropStruct &result) {
  auto map = (butter::map<std::string, RawValue>)value;

  auto tmp_stringProp = map.find(\\"stringProp\\");
  if (tmp_stringProp != map.end()) {
    fromRawValue(context, tmp_stringProp->second, result.stringProp);
  }
  auto tmp_booleanProp = map.find(\\"booleanProp\\");
  if (tmp_booleanProp != map.end()) {
    fromRawValue(context, tmp_booleanProp->second, result.booleanProp);
  }
  auto tmp_floatProp = map.find(\\"floatProp\\");
  if (tmp_floatProp != map.end()) {
    fromRawValue(context, tmp_floatProp->second, result.floatProp);
  }
  auto tmp_intProp = map.find(\\"intProp\\");
  if (tmp_intProp != map.end()) {
    fromRawValue(context, tmp_intProp->second, result.intProp);
  }
  auto tmp_stringEnumProp = map.find(\\"stringEnumProp\\");
  if (tmp_stringEnumProp != map.end()) {
    fromRawValue(context, tmp_stringEnumProp->second, result.stringEnumProp);
  }
  auto tmp_intEnumProp = map.find(\\"intEnumProp\\");
  if (tmp_intEnumProp != map.end()) {
    fromRawValue(context, tmp_intEnumProp->second, result.intEnumProp);
  }
}

static inline std::string toString(const ObjectPropsNativeComponentObjectPropStruct &value) {
  return \\"[Object ObjectPropsNativeComponentObjectPropStruct]\\";
}

struct ObjectPropsNativeComponentObjectArrayPropStruct {
  std::vector<std::string> array;
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsNativeComponentObjectArrayPropStruct &result) {
  auto map = (butter::map<std::string, RawValue>)value;

  auto tmp_array = map.find(\\"array\\");
  if (tmp_array != map.end()) {
    fromRawValue(context, tmp_array->second, result.array);
  }
}

static inline std::string toString(const ObjectPropsNativeComponentObjectArrayPropStruct &value) {
  return \\"[Object ObjectPropsNativeComponentObjectArrayPropStruct]\\";
}

struct ObjectPropsNativeComponentObjectPrimitiveRequiredPropStruct {
  ImageSource image;
  SharedColor color;
  Point point;
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsNativeComponentObjectPrimitiveRequiredPropStruct &result) {
  auto map = (butter::map<std::string, RawValue>)value;

  auto tmp_image = map.find(\\"image\\");
  if (tmp_image != map.end()) {
    fromRawValue(context, tmp_image->second, result.image);
  }
  auto tmp_color = map.find(\\"color\\");
  if (tmp_color != map.end()) {
    fromRawValue(context, tmp_color->second, result.color);
  }
  auto tmp_point = map.find(\\"point\\");
  if (tmp_point != map.end()) {
    fromRawValue(context, tmp_point->second, result.point);
  }
}

static inline std::string toString(const ObjectPropsNativeComponentObjectPrimitiveRequiredPropStruct &value) {
  return \\"[Object ObjectPropsNativeComponentObjectPrimitiveRequiredPropStruct]\\";
}
class ObjectPropsNativeComponentProps final : public ViewProps {
 public:
  ObjectPropsNativeComponentProps() = default;
  ObjectPropsNativeComponentProps(const PropsParserContext& context, const ObjectPropsNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  ObjectPropsNativeComponentObjectPropStruct objectProp{};
  ObjectPropsNativeComponentObjectArrayPropStruct objectArrayProp{};
  ObjectPropsNativeComponentObjectPrimitiveRequiredPropStruct objectPrimitiveRequiredProp{};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'PointPropNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/Geometry.h>

namespace facebook {
namespace react {

class PointPropNativeComponentViewProps final : public ViewProps {
 public:
  PointPropNativeComponentViewProps() = default;
  PointPropNativeComponentViewProps(const PropsParserContext& context, const PointPropNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  Point startPoint{};
};

} // namespace react
} // namespace facebook
",
}
`;

exports[`GeneratePropsH can generate for 'StringPropNativeComponent.js' 1`] = `
Object {
  "Props.h": "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook {
namespace react {

class StringPropNativeComponentViewProps final : public ViewProps {
 public:
  StringPropNativeComponentViewProps() = default;
  StringPropNativeComponentViewProps(const PropsParserContext& context, const StringPropNativeComponentViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string placeholder{\\"\\"};
  std::string defaultValue{};
};

} // namespace react
} // namespace facebook
",
}
`;
