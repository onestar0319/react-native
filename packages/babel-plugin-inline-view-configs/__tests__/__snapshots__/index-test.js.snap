// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Babel plugin inline view configs can inline config for FullNativeComponent.js 1`] = `
"// @flow
const codegenNativeCommands = require('codegenNativeCommands');

const codegenNativeComponent = require('codegenNativeComponent');

import type { Int32, BubblingEventHandler, DirectEventHandler, WithDefault } from 'CodegenFlowtypes';
import type { ViewProps } from 'ViewPropTypes';
interface NativeCommands {
  +hotspotUpdate: (viewRef: React.Ref<'RCTView'>, x: Int32, y: Int32) => void,
  +scrollTo: (viewRef: React.Ref<'RCTView'>, y: Int32, animated: boolean) => void,
}
type ModuleProps = $ReadOnly<{| ...ViewProps,
  // Props
  boolean_default_true_optional_both?: WithDefault<boolean, true>,
  // Events
  onDirectEventDefinedInlineNull: DirectEventHandler<null>,
  onBubblingEventDefinedInlineNull: BubblingEventHandler<null>,
|}>;

const registerGeneratedViewConfig = require('registerGeneratedViewConfig');

const {
  UIManager
} = require(\\"react-native\\");

const {
  findNodeHandle
} = require(\\"react-native\\");

const ModuleViewConfig = {
  uiViewClassName: 'RCTModule',
  bubblingEventTypes: {
    topBubblingEventDefinedInlineNull: {
      phasedRegistrationNames: {
        captured: 'onBubblingEventDefinedInlineNullCapture',
        bubbled: 'onBubblingEventDefinedInlineNull'
      }
    }
  },
  directEventTypes: {
    topDirectEventDefinedInlineNull: {
      registrationName: 'onDirectEventDefinedInlineNull'
    }
  },
  validAttributes: {
    boolean_default_true_optional_both: true,
    onDirectEventDefinedInlineNull: true,
    onBubblingEventDefinedInlineNull: true
  }
};
let nativeComponentName = 'RCTModule';
registerGeneratedViewConfig(nativeComponentName, ModuleViewConfig);
export const __INTERNAL_VIEW_CONFIG = ModuleViewConfig;
export default nativeComponentName;
export const Commands = {
  hotspotUpdate(ref, x, y) {
    UIManager.dispatchViewCommand(findNodeHandle(ref), UIManager.getViewManagerConfig(\\"RCTModule\\").Commands.hotspotUpdate, [x, y]);
  },

  scrollTo(ref, y, animated) {
    UIManager.dispatchViewCommand(findNodeHandle(ref), UIManager.getViewManagerConfig(\\"RCTModule\\").Commands.scrollTo, [y, animated]);
  }

};"
`;

exports[`Babel plugin inline view configs can inline config for NotANativeComponent.js 1`] = `
"const requireNativeComponent = require('requireNativeComponent');

export default 'Not a view config';"
`;

exports[`Babel plugin inline view configs fails on inline config for CommandsExportedWithDifferentNameNativeComponent.js 1`] = `"Native commands must be exported with the name 'Commands'"`;

exports[`Babel plugin inline view configs fails on inline config for CommandsExportedWithShorthandNativeComponent.js 1`] = `"'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands."`;

exports[`Babel plugin inline view configs fails on inline config for OtherCommandsExportNativeComponent.js 1`] = `"'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands."`;
